(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{595:function(t,a,e){"use strict";e.r(a);var s=e(6),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("blockquote",[e("p",[t._v("BUG,简单来说就是程序运行结果与预期的不同，下面来说说Xcode中的DEBUG方法")]),t._v(" "),e("p",[e("a",{attrs:{href:"http://www.cnblogs.com/daiweilai/p/4421340.html#quanjuduandian",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考博文"),e("OutboundLink")],1)])]),t._v(" "),e("h1",{attrs:{id:"断点调试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#断点调试"}},[t._v("#")]),t._v(" 断点调试")]),t._v(" "),e("ul",[e("li",[t._v("普通断点")]),t._v(" "),e("li",[t._v("全局断点")]),t._v(" "),e("li",[t._v("条件断点")])]),t._v(" "),e("h4",{attrs:{id:"_1-普通断点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-普通断点"}},[t._v("#")]),t._v(" 1.普通断点")]),t._v(" "),e("p",[t._v("看图")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://ww4.sinaimg.cn/large/65e4f1e6gw1f8rti38wlxj20ke0d3n0h.jpg",alt:""}})]),t._v(" "),e("p",[t._v("当程序运行到断点处时会停下，然后进行单步调试\n"),e("img",{attrs:{src:"http://images.cnitblog.com/blog2015/680363/201504/131002381048966.png",alt:""}})]),t._v(" "),e("h4",{attrs:{id:"_2-全局断点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-全局断点"}},[t._v("#")]),t._v(" 2.全局断点")]),t._v(" "),e("p",[t._v("当程序运行出现崩溃时，就会自动断点到出现crash的代码行")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://images.cnitblog.com/blog2015/680363/201504/130933043392329.png",alt:""}})]),t._v(" "),e("h4",{attrs:{id:"_3-条件断点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-条件断点"}},[t._v("#")]),t._v(" 3.条件断点")]),t._v(" "),e("p",[t._v("我们如果在一个循环里面使用了断点，如果这个循环执行了100万次，那你的断点要执行那么多次，你不觉得蛋蛋都凉了的忧伤么？所以我们这么做：")]),t._v(" "),e("p",[t._v("编辑断点")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://ww1.sinaimg.cn/large/65e4f1e6gw1f8rw64yys0j207i03laah.jpg",alt:""}})]),t._v(" "),e("p",[t._v("添加条件Condition")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://ww2.sinaimg.cn/large/65e4f1e6gw1f8rw52q1tjj20ct04lmxo.jpg",alt:""}})]),t._v(" "),e("p",[e("img",{attrs:{src:"http://ww3.sinaimg.cn/large/65e4f1e6gw1f8rw44p4ykj20ln0g10vg.jpg",alt:""}})]),t._v(" "),e("p",[t._v("还可以Action中在条件断点触发时执行事件")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://ww3.sinaimg.cn/large/65e4f1e6gw1f8rwq16872j20cv07amyg.jpg",alt:""}})]),t._v(" "),e("p",[t._v("如：输出信息")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://ww2.sinaimg.cn/large/65e4f1e6gw1f8rwms50t3j20dj07bjso.jpg",alt:""}})]),t._v(" "),e("h4",{attrs:{id:"_4-方法断点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-方法断点"}},[t._v("#")]),t._v(" 4.方法断点")]),t._v(" "),e("h1",{attrs:{id:"打印调试-nslog"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#打印调试-nslog"}},[t._v("#")]),t._v(" 打印调试（NSLog）")]),t._v(" "),e("p",[t._v("尽管ARC已经让内存管理变得简单、省时和高效，但是在object的life-cycles中跟踪一些重要事件依然十分重要。毕竟ARC并没有完全排除内存泄露的可能性，或者试图访问一个被release的对象。")]),t._v(" "),e("ul",[e("li",[t._v("NSLog")])]),t._v(" "),e("p",[t._v("强化NSLog")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//A better version of NSLog\n#define NSLog(format, ...) do { \\\nfprintf(stderr, "<%s : %d> %s\\n", \\\n[[[NSString stringWithUTF8String:__FILE__] lastPathComponent] UTF8String], \\\n__LINE__, __func__); \\\n(NSLog)((format), ##__VA_ARGS__); \\\nfprintf(stderr, "-------\\n"); \\\n} while (0)\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("p",[t._v("控制台输出")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<ViewController.m : 32> -[ViewController viewDidLoad]\n2016-10-14 17:33:31.022 DEUBG[12852:1238167] Hello World！\n-------\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("利用NSString输出多种类型")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://ww4.sinaimg.cn/large/65e4f1e6gw1f8rxvn6fqlj20nc05cgoh.jpg",alt:""}})]),t._v(" "),e("ul",[e("li",[t._v("开启僵尸对象")])]),t._v(" "),e("p",[t._v("Xcode可以把那些已经release掉得对象，变成“僵尸”，当我们访问一个Zombie对象时，Xcode可以告诉我们正在访问的对象是一个不应该存在的对象了。因为Xcode知道这个对象是什么，所以可以让我们知道这个对象在哪里，以及这是什么时候发生的。\n所以Zombies是你的好基友！他可以让你输出的信息更具体！")]),t._v(" "),e("p",[t._v("具体这样做：(僵尸只能用在模拟器和OC语言)")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://images.cnitblog.com/blog2015/680363/201504/130941016986159.png",alt:""}})]),t._v(" "),e("h1",{attrs:{id:"控制台-lldb-命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#控制台-lldb-命令"}},[t._v("#")]),t._v(" 控制台(lldb 命令)")]),t._v(" "),e("p",[t._v("LLDB 是一个有着 REPL 的特性和 C++ ,Python 插件的开源调试器。LLDB 绑定在 Xcode 内部，存在于主窗口底部的控制台中。调试器允许你在程序运行的特定时暂停它，你可以查看变量的值，执行自定的指令，并且按照你所认为合适的步骤来操作程序的进展。(这里有一个关于调试器如何工作的总体的解释。)")]),t._v(" "),e("p",[t._v("你以前有可能已经使用过调试器，即使只是在 Xcode 的界面上加一些断点。但是通过一些小的技巧，你就可以做一些非常酷的事情。GDB to LLDB 参考是一个非常好的调试器可用命令的总览。你也可以安装 Chisel，它是一个开源的 LLDB 插件合辑，这会使调试变得更加有趣。")]),t._v(" "),e("p",[t._v("参考：")]),t._v(" "),e("p",[e("a",{attrs:{href:"http://objccn.io/issue-19-2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("与调试器共舞 - LLDB 的华尔兹"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"http://www.starfelix.com/blog/2014/03/17/lldbdiao-shi-ming-ling-chu-tan/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LLDB调试命令初探"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://developer.apple.com/library/content/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/Introduction.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("About LLDB and Xcode"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"http://lldb.llvm.org/tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("The LLDB Debugger"),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),e("h6",{attrs:{id:"help"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#help"}},[t._v("#")]),t._v(" "),e("em",[t._v("help")])]),t._v(" "),e("p",[t._v("在控制台输入"),e("code",[t._v("help")]),t._v("，显示控制台支持的lldb命令")]),t._v(" "),e("h6",{attrs:{id:"print"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#print"}},[t._v("#")]),t._v(" "),e("em",[t._v("print")])]),t._v(" "),e("p",[t._v("打印值")]),t._v(" "),e("p",[t._v("缩写"),e("code",[t._v("p")])]),t._v(" "),e("p",[t._v("print是 "),e("code",[t._v("expression --")]),t._v(" 的缩写")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://ww4.sinaimg.cn/large/006y8lVagw1f8vakv88vuj30b204s74x.jpg",alt:""}})]),t._v(" "),e("p",[t._v("printk可以指定格式打印\n如\n"),e("code",[t._v("默认 p")])]),t._v(" "),e("p",[e("code",[t._v("十六进制 p/x")]),t._v("、")]),t._v(" "),e("p",[e("code",[t._v("二进制 p/t")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(lldb) p 16\n16\n\n(lldb) p/x 16\n0x10\n\n(lldb) p/t 16\n0b00000000000000000000000000010000\n\n(lldb) p/t (char)16\n0b00010000\n\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br")])]),e("p",[t._v("你也可以使用 p/c 打印字符，或者 p/s 打印以空终止的字符串  p/d打印ACRSII(译者注：以 '\\0' 结尾的字符串)。")]),t._v(" "),e("p",[t._v("完整清单"),e("a",{attrs:{href:"https://sourceware.org/gdb/onlinedocs/gdb/Output-Formats.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("点击查看"),e("OutboundLink")],1)]),t._v(" "),e("h6",{attrs:{id:"po"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#po"}},[t._v("#")]),t._v(" "),e("em",[t._v("po")])]),t._v(" "),e("p",[t._v("打印对象，是 "),e("code",[t._v("e -o --")]),t._v("的缩写")]),t._v(" "),e("h6",{attrs:{id:"expression"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expression"}},[t._v("#")]),t._v(" "),e("em",[t._v("expression")])]),t._v(" "),e("h4",{attrs:{id:"流程控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流程控制"}},[t._v("#")]),t._v(" 流程控制")]),t._v(" "),e("p",[t._v("当你通过 Xcode 的源码编辑器的侧边槽 (或者通过下面的方法) 插入一个断点，程序到达断点时会就会停止运行。")]),t._v(" "),e("p",[t._v("调试条上会出现四个你可以用来控制程序的执行流程的按钮。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://objccn.io/images/issues/issue-19/Image_2014-11-22_at_10.37.45_AM.png",alt:""}})]),t._v(" "),e("p",[t._v("从左到右，四个按钮分别是：continue，step over，step into，step out。")]),t._v(" "),e("p",[t._v("第一个，continue 按钮，会取消程序的暂停，允许程序正常执行 (要么一直执行下去，要么到达下一个断点)。在 LLDB 中，你可以使用 process continue 命令来达到同样的效果，它的别名为 continue，或者也可以缩写为 c。")]),t._v(" "),e("p",[t._v("第二个，step over 按钮，会以黑盒的方式执行一行代码。如果所在这行代码是一个函数调用，那么就不会跳进这个函数，而是会执行这个函数，然后继续。LLDB 则可以使用 thread step-over，next，或者 n 命令。")]),t._v(" "),e("p",[t._v("如果你确实想跳进一个函数调用来调试或者检查程序的执行情况，那就用第三个按钮，step in，或者在LLDB中使用 thread step in，step，或者 s 命令。注意，当前行不是函数调用时，next 和 step 效果是一样的。")]),t._v(" "),e("p",[t._v("大多数人知道 c，n 和 s，但是其实还有第四个按钮，step out。如果你曾经不小心跳进一个函数，但实际上你想跳过它，常见的反应是重复的运行 n 直到函数返回。其实这种情况，step out 按钮是你的救世主。它会继续执行到下一个返回语句 (直到一个堆栈帧结束) 然后再次停止。")]),t._v(" "),e("h6",{attrs:{id:"frame-info"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#frame-info"}},[t._v("#")]),t._v(" frame info")]),t._v(" "),e("p",[t._v("会告诉你当前的行数和源码文件")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(lldb) frame info\nframe #0: 0x000000010a53bcd4 DebuggerDance`main + 68 at main.m:17\n\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("h6",{attrs:{id:"thread-return"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#thread-return"}},[t._v("#")]),t._v(" Thread Return")]),t._v(" "),e("p",[t._v("调试时，还有一个很棒的函数可以用来控制程序流程：thread return 。它有一个可选参数，在执行时它会把可选参数加载进返回寄存器里，然后立刻执行返回命令，跳出当前栈帧。这意味这函数剩余的部分不会被执行。这会给 ARC 的引用计数造成一些问题，或者会使函数内的清理部分失效。但是在函数的开头执行这个命令，是个非常好的隔离这个函数，伪造返回值的方式 。")]),t._v(" "),e("p",[e("code",[t._v("(lldb) thread return NO")])]),t._v(" "),e("h4",{attrs:{id:"不用断点调试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不用断点调试"}},[t._v("#")]),t._v(" 不用断点调试")]),t._v(" "),e("p",[t._v("在程序运行时，点击暂停按钮,即可进入调试状态，能对全局变量做操作")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://ww4.sinaimg.cn/large/006y8lVagw1f8vd4vy66ej307300xjr8.jpg",alt:""}})]),t._v(" "),e("h1",{attrs:{id:"工具调试-instruments"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工具调试-instruments"}},[t._v("#")]),t._v(" 工具调试(instruments)")]),t._v(" "),e("p",[t._v("instruments Xcode自带许多工具供大家使用，打开方式如下图：")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://ww1.sinaimg.cn/large/006y8lVagw1f8ve05g45cj30qd0f276o.jpg",alt:""}})]),t._v(" "),e("p",[e("strong",[t._v("leaks")]),t._v("内存泄漏检查工具")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://ww4.sinaimg.cn/large/006y8lVagw1f8ve5wnnr6j30li0c1wgd.jpg",alt:""}})]),t._v(" "),e("p",[t._v("运行后查看")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://ww4.sinaimg.cn/large/006y8lVagw1f8vebiu6r5j30se0kdqcr.jpg",alt:""}})]),t._v(" "),e("h1",{attrs:{id:"视图调试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#视图调试"}},[t._v("#")]),t._v(" 视图调试")]),t._v(" "),e("p",[t._v("启用视图调试:运行app过程中，按下底部的Debug View Hierarchy 按钮，或者从菜单中选择Debug > View Debugging > Capture View Hierarchy 来启动视图调试。")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://ww1.sinaimg.cn/large/006y8lVagw1f8vejy3rmgj30by01kmx8.jpg",alt:""}})]),t._v(" "),e("p",[t._v("启动视图调试后，Xcode会对应用程序的视图层次拍一个快照并展示三维原型视图来探究用户界面的层级。该三维视图除了展示app的视图层次外，还展示每个视图的位置、顺序和视图尺寸，以及视图间的交互方式。")]),t._v(" "),e("h1",{attrs:{id:"模拟器调试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模拟器调试"}},[t._v("#")]),t._v(" 模拟器调试")]),t._v(" "),e("p",[t._v("编译并运行应用程序，选中模拟器，从 Debug菜单中选择Color Blended Layers选项。")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://ww2.sinaimg.cn/large/006y8lVagw1f8vezdqlh1j3092075dgz.jpg",alt:""}})]),t._v(" "),e("p",[t._v("然后会看到app的用户界面被红色和绿色覆盖，显示了哪些图层可以被叠加覆盖，以及哪些图层是透明的。混合层属于计算密集型视图，所以推荐尽可能地使用不透明的图层。")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://ww3.sinaimg.cn/large/006y8lVagw1f8vf07u522j30ag0j1q36.jpg",alt:""}})]),t._v(" "),e("h1",{attrs:{id:"结语"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[t._v("#")]),t._v(" 结语")]),t._v(" "),e("p",[t._v("目前所知道的调试方法大概就是上面这几种了，若有什么有趣的方法，请和我分享哈！")])])}),[],!1,null,null,null);a.default=r.exports}}]);