(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{552:function(e,n,s){"use strict";s.r(n);var a=s(6),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"深入理解runloop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深入理解runloop"}},[e._v("#")]),e._v(" 深入理解RunLoop")]),e._v(" "),s("blockquote",[s("p",[e._v("本文转自："),s("a",{attrs:{href:"http://blog.ibireme.com/2015/05/18/runloop/",target:"_blank",rel:"noopener noreferrer"}},[e._v("《深入理解RunLoop》"),s("OutboundLink")],1)])]),e._v(" "),s("h1",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),s("p",[e._v("RunLoop 是 iOS 和 OSX 开发中非常基础的一个概念，这篇文章将从 CFRunLoop 的源码入手，介绍 RunLoop 的概念以及底层实现原理。之后会介绍一下在 iOS 中，苹果是如何利用 RunLoop 实现自动释放池、延迟回调、触摸事件、屏幕刷新等功能的。")]),e._v(" "),s("h1",{attrs:{id:"目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[e._v("#")]),e._v(" 目录")]),e._v(" "),s("ul",[s("li",[e._v("RunLoop 的概念")]),e._v(" "),s("li",[e._v("RunLoop 与线程的关系")]),e._v(" "),s("li",[e._v("RunLoop 对外的接口")]),e._v(" "),s("li",[e._v("RunLoop 的 Mode")]),e._v(" "),s("li",[e._v("RunLoop 的内部逻辑")]),e._v(" "),s("li",[e._v("RunLoop 的底层实现")]),e._v(" "),s("li",[e._v("苹果用 RunLoop 实现的功能\n"),s("ul",[s("li",[e._v("AutoreleasePool")]),e._v(" "),s("li",[e._v("事件响应")]),e._v(" "),s("li",[e._v("手势识别")]),e._v(" "),s("li",[e._v("界面更新")]),e._v(" "),s("li",[e._v("定时器")]),e._v(" "),s("li",[e._v("PerformSelecter")]),e._v(" "),s("li",[e._v("关于GCD")]),e._v(" "),s("li",[e._v("关于网络请求")])])]),e._v(" "),s("li",[e._v("RunLoop 的实际应用举例\n"),s("ul",[s("li",[e._v("AFNetworking")]),e._v(" "),s("li",[e._v("AsyncDisplayKit")])])])]),e._v(" "),s("h1",{attrs:{id:"正文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正文"}},[e._v("#")]),e._v(" 正文")]),e._v(" "),s("h2",{attrs:{id:"runloop-的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#runloop-的概念"}},[e._v("#")]),e._v(" RunLoop 的概念")]),e._v(" "),s("p",[e._v("一般来讲，一个线程一次只能执行一个任务，执行完成后线程就会退出。如果我们需要一个机制，让线程能随时处理事件但并不退出，通常的代码逻辑是这样的：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function loop() {\n    initialize();\n    do {\n        var message = get_next_message();\n        process_message(message);\n    } while (message != quit);\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("这种模型通常被称作 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Event_loop",target:"_blank",rel:"noopener noreferrer"}},[e._v("Event Loop"),s("OutboundLink")],1),e._v("。 Event Loop 在很多系统和框架里都有实现，比如 Node.js 的事件处理，比如 Windows 程序的消息循环，再比如 OSX/iOS 里的 RunLoop。实现这种模型的关键点在于：如何管理事件/消息，如何让线程在没有处理消息时休眠以避免资源占用、在有消息到来时立刻被唤醒。")]),e._v(" "),s("p",[e._v('所以，RunLoop 实际上就是一个对象，这个对象管理了其需要处理的事件和消息，并提供了一个入口函数来执行上面 Event Loop 的逻辑。线程执行了这个函数后，就会一直处于这个函数内部 "接受消息->等待->处理" 的循环中，直到这个循环结束（比如传入 quit 的消息），函数返回。')]),e._v(" "),s("p",[e._v("OSX/iOS 系统中，提供了两个这样的对象：NSRunLoop 和 CFRunLoopRef。")]),e._v(" "),s("p",[e._v("CFRunLoopRef 是在 CoreFoundation 框架内的，它提供了纯 C 函数的 API，所有这些 API 都是线程安全的。")]),e._v(" "),s("p",[e._v("NSRunLoop 是基于 CFRunLoopRef 的封装，提供了面向对象的 API，但是这些 API 不是线程安全的。")]),e._v(" "),s("p",[e._v("CFRunLoopRef 的代码是"),s("a",{attrs:{href:"https://opensource.apple.com/source/CF/CF-855.17/CFRunLoop.c",target:"_blank",rel:"noopener noreferrer"}},[e._v("开源"),s("OutboundLink")],1),e._v("的，你可以在"),s("a",{attrs:{href:"http://opensource.apple.com/tarballs/CF/",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),s("OutboundLink")],1),e._v("下载到整个 CoreFoundation 的源码来查看。")]),e._v(" "),s("p",[e._v("(Update: Swift 开源后，苹果又维护了一个跨平台的 CoreFoundation 版本："),s("a",{attrs:{href:"https://github.com/apple/swift-corelibs-foundation/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/apple/swift-corelibs-foundation/"),s("OutboundLink")],1),e._v("，这个版本的源码可能和现有 iOS 系统中的实现略不一样，但更容易编译，而且已经适配了 Linux/Windows。)")]),e._v(" "),s("h2",{attrs:{id:"runloop-与线程的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#runloop-与线程的关系"}},[e._v("#")]),e._v(" RunLoop 与线程的关系")]),e._v(" "),s("p",[e._v("首先，iOS 开发中能遇到两个线程对象: pthread_t 和 NSThread。过去苹果有份"),s("a",{attrs:{href:"http://www.fenestrated.net/~macman/mirrors/Apple%20Technotes%20(As%20of%202002)/tn/tn2028.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("文档"),s("OutboundLink")],1),e._v("标明了 NSThread 只是 pthread_t 的封装，但那份文档已经失效了，现在它们也有可能都是直接包装自最底层的 mach thread。苹果并没有提供这两个对象相互转换的接口，但不管怎么样，可以肯定的是 pthread_t 和 NSThread 是一一对应的。比如，你可以通过 "),s("code",[e._v("pthread_main_thread_np()")]),e._v(" 或 "),s("code",[e._v("[NSThread mainThread]")]),e._v(" 来获取主线程；也可以通过 "),s("code",[e._v("pthread_self()")]),e._v(" 或 "),s("code",[e._v("[NSThread currentThread]")]),e._v(" 来获取当前线程。CFRunLoop 是基于 pthread 来管理的。")]),e._v(" "),s("p",[e._v("苹果不允许直接创建 RunLoop，它只提供了两个自动获取的函数："),s("code",[e._v("CFRunLoopGetMain()")]),e._v(" 和 "),s("code",[e._v("CFRunLoopGetCurrent()")]),e._v("。 这两个函数内部的逻辑大概是下面这样:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/// 全局的Dictionary，key 是 pthread_t， value 是 CFRunLoopRef\nstatic CFMutableDictionaryRef loopsDic;\n/// 访问 loopsDic 时的锁\nstatic CFSpinLock_t loopsLock;\n \n/// 获取一个 pthread 对应的 RunLoop。\nCFRunLoopRef _CFRunLoopGet(pthread_t thread) {\n    OSSpinLockLock(&loopsLock);\n    \n    if (!loopsDic) {\n        // 第一次进入时，初始化全局Dic，并先为主线程创建一个 RunLoop。\n        loopsDic = CFDictionaryCreateMutable();\n        CFRunLoopRef mainLoop = _CFRunLoopCreate();\n        CFDictionarySetValue(loopsDic, pthread_main_thread_np(), mainLoop);\n    }\n    \n    /// 直接从 Dictionary 里获取。\n    CFRunLoopRef loop = CFDictionaryGetValue(loopsDic, thread));\n    \n    if (!loop) {\n        /// 取不到时，创建一个\n        loop = _CFRunLoopCreate();\n        CFDictionarySetValue(loopsDic, thread, loop);\n        /// 注册一个回调，当线程销毁时，顺便也销毁其对应的 RunLoop。\n        _CFSetTSD(..., thread, loop, __CFFinalizeRunLoop);\n    }\n    \n    OSSpinLockUnLock(&loopsLock);\n    return loop;\n}\n \nCFRunLoopRef CFRunLoopGetMain() {\n    return _CFRunLoopGet(pthread_main_thread_np());\n}\n \nCFRunLoopRef CFRunLoopGetCurrent() {\n    return _CFRunLoopGet(pthread_self());\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br")])]),s("p",[e._v("从上面的代码可以看出，线程和 RunLoop 之间是一一对应的，其关系是保存在一个全局的 Dictionary 里。线程刚创建时并没有 RunLoop，如果你不主动获取，那它一直都不会有。RunLoop 的创建是发生在第一次获取时，RunLoop 的销毁是发生在线程结束时。你只能在一个线程的内部获取其 RunLoop（主线程除外）。")]),e._v(" "),s("h2",{attrs:{id:"runloop-对外的接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#runloop-对外的接口"}},[e._v("#")]),e._v(" RunLoop 对外的接口")]),e._v(" "),s("p",[e._v("在 CoreFoundation 里面关于 RunLoop 有5个类:")]),e._v(" "),s("ul",[s("li",[e._v("CFRunLoopRef")]),e._v(" "),s("li",[e._v("CFRunLoopModeRef")]),e._v(" "),s("li",[e._v("CFRunLoopSourceRef")]),e._v(" "),s("li",[e._v("CFRunLoopTimerRef")]),e._v(" "),s("li",[e._v("CFRunLoopObserverRef")])]),e._v(" "),s("p",[e._v("其中 CFRunLoopModeRef 类并没有对外暴露，只是通过 CFRunLoopRef 的接口进行了封装。他们的关系如下:")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://blog.ibireme.com/wp-content/uploads/2015/05/RunLoop_0.png",alt:"RunLoop 有5个类的关系"}})]),e._v(" "),s("p",[e._v("一个 RunLoop 包含若干个 Mode，每个 Mode 又包含若干个 Source/Timer/Observer。每次调用 RunLoop 的主函数时，只能指定其中一个 Mode，这个Mode被称作 CurrentMode。如果需要切换 Mode，只能退出 Loop，再重新指定一个 Mode 进入。这样做主要是为了分隔开不同组的 Source/Timer/Observer，让其互不影响。")]),e._v(" "),s("p",[s("strong",[e._v("CFRunLoopSourceRef")]),e._v(" 是事件产生的地方。Source 有两个版本：Source0 和 Source1。")]),e._v(" "),s("ul",[s("li",[e._v("Source0 只包含了一个回调（函数指针），它并不能主动触发事件。使用时，你需要先调用 "),s("code",[e._v("CFRunLoopSourceSignal(source)")]),e._v("，将这个 Source 标记为待处理，然后手动调用 "),s("code",[e._v("CFRunLoopWakeUp(runloop)")]),e._v(" 来唤醒 RunLoop，让其处理这个事件。")]),e._v(" "),s("li",[e._v("Source1 包含了一个 mach_port 和一个回调（函数指针），被用于通过内核和其他线程相互发送消息。这种 Source 能主动唤醒 RunLoop 的线程，其原理在下面会讲到。")])]),e._v(" "),s("p",[s("strong",[e._v("CFRunLoopTimerRef")]),e._v(" 是基于时间的触发器，它和 NSTimer 是toll-free bridged 的，可以混用。其包含一个时间长度和一个回调（函数指针）。当其加入到 RunLoop 时，RunLoop会注册对应的时间点，当时间点到时，RunLoop会被唤醒以执行那个回调。")]),e._v(" "),s("p",[s("strong",[e._v("CFRunLoopObserverRef")]),e._v(" 是观察者，每个 Observer 都包含了一个回调（函数指针），当 RunLoop 的状态发生变化时，观察者就能通过回调接受到这个变化。可以观测的时间点有以下几个：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) {\n    kCFRunLoopEntry         = (1UL << 0), // 即将进入Loop\n    kCFRunLoopBeforeTimers  = (1UL << 1), // 即将处理 Timer\n    kCFRunLoopBeforeSources = (1UL << 2), // 即将处理 Source\n    kCFRunLoopBeforeWaiting = (1UL << 5), // 即将进入休眠\n    kCFRunLoopAfterWaiting  = (1UL << 6), // 刚从休眠中唤醒\n    kCFRunLoopExit          = (1UL << 7), // 即将退出Loop\n};\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("上面的 Source/Timer/Observer 被统称为 mode item，一个 item 可以被同时加入多个 mode。但一个 item 被重复加入同一个 mode 时是不会有效果的。如果一个 mode 中一个 item 都没有，则 RunLoop 会直接退出，不进入循环")]),e._v(" "),s("h2",{attrs:{id:"runloop-的-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#runloop-的-mode"}},[e._v("#")]),e._v(" RunLoop 的 Mode")]),e._v(" "),s("p",[e._v("CFRunLoopMode 和 CFRunLoop 的结构大致如下：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('struct __CFRunLoopMode {\n    CFStringRef _name;            // Mode Name, 例如 @"kCFRunLoopDefaultMode"\n    CFMutableSetRef _sources0;    // Set\n    CFMutableSetRef _sources1;    // Set\n    CFMutableArrayRef _observers; // Array\n    CFMutableArrayRef _timers;    // Array\n    ...\n};\n \nstruct __CFRunLoop {\n    CFMutableSetRef _commonModes;     // Set\n    CFMutableSetRef _commonModeItems; // Set<Source/Observer/Timer>\n    CFRunLoopModeRef _currentMode;    // Current Runloop Mode\n    CFMutableSetRef _modes;           // Set\n    ...\n};\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])]),s("p",[e._v('这里有个概念叫 "CommonModes"：一个 Mode 可以将自己标记为"Common"属性（通过将其 ModeName 添加到 RunLoop 的 "commonModes" 中）。每当 RunLoop 的内容发生变化时，RunLoop 都会自动将 _commonModeItems 里的 Source/Observer/Timer 同步到具有 "Common" 标记的所有Mode里。')]),e._v(" "),s("p",[e._v("CFRunLoop对外暴露的管理 Mode 接口只有下面2个:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("CFRunLoopAddCommonMode(CFRunLoopRef runloop, CFStringRef modeName);\nCFRunLoopRunInMode(CFStringRef modeName, ...);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("Mode 暴露的管理 mode item 的接口有下面几个：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFStringRef modeName);\nCFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFStringRef modeName);\nCFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFStringRef mode);\nCFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFStringRef modeName);\nCFRunLoopRemoveObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFStringRef modeName);\nCFRunLoopRemoveTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFStringRef mode);\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("你只能通过 mode name 来操作内部的 mode，当你传入一个新的 mode name 但 RunLoop 内部没有对应 mode 时，RunLoop会自动帮你创建对应的 CFRunLoopModeRef。对于一个 RunLoop 来说，其内部的 mode "),s("code",[e._v("只能增加不能删除")]),e._v("。")]),e._v(" "),s("p",[e._v("苹果公开提供的 Mode 有两个："),s("code",[e._v("kCFRunLoopDefaultMode (NSDefaultRunLoopMode)")]),e._v(" 和 "),s("code",[e._v("UITrackingRunLoopMode")]),e._v("，你可以用这两个 Mode Name 来操作其对应的 Mode。")]),e._v(" "),s("p",[e._v("同时苹果还提供了一个操作 Common 标记的字符串："),s("code",[e._v("kCFRunLoopCommonModes (NSRunLoopCommonModes)")]),e._v('，你可以用这个字符串来操作 Common Items，或标记一个 Mode 为 "Common"。使用时注意区分这个字符串和其他 mode name。')]),e._v(" "),s("p",[e._v("RunLoop 的内部逻辑")]),e._v(" "),s("p",[e._v("根据苹果在"),s("a",{attrs:{href:"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW23",target:"_blank",rel:"noopener noreferrer"}},[e._v("文档"),s("OutboundLink")],1),e._v("里的说明，RunLoop 内部的逻辑大致如下:")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://blog.ibireme.com/wp-content/uploads/2015/05/RunLoop_1.png",alt:""}})]),e._v(" "),s("p",[e._v("其内部代码整理如下 （太长了不想看可以直接跳过去，后面会有说明）：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/// 用DefaultMode启动\nvoid CFRunLoopRun(void) {\n    CFRunLoopRunSpecific(CFRunLoopGetCurrent(), kCFRunLoopDefaultMode, 1.0e10, false);\n}\n \n/// 用指定的Mode启动，允许设置RunLoop超时时间\nint CFRunLoopRunInMode(CFStringRef modeName, CFTimeInterval seconds, Boolean stopAfterHandle) {\n    return CFRunLoopRunSpecific(CFRunLoopGetCurrent(), modeName, seconds, returnAfterSourceHandled);\n}\n \n/// RunLoop的实现\nint CFRunLoopRunSpecific(runloop, modeName, seconds, stopAfterHandle) {\n    \n    /// 首先根据modeName找到对应mode\n    CFRunLoopModeRef currentMode = __CFRunLoopFindMode(runloop, modeName, false);\n    /// 如果mode里没有source/timer/observer, 直接返回。\n    if (__CFRunLoopModeIsEmpty(currentMode)) return;\n    \n    /// 1. 通知 Observers: RunLoop 即将进入 loop。\n    __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopEntry);\n    \n    /// 内部函数，进入loop\n    __CFRunLoopRun(runloop, currentMode, seconds, returnAfterSourceHandled) {\n        \n        Boolean sourceHandledThisLoop = NO;\n        int retVal = 0;\n        do {\n \n            /// 2. 通知 Observers: RunLoop 即将触发 Timer 回调。\n            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeTimers);\n            /// 3. 通知 Observers: RunLoop 即将触发 Source0 (非port) 回调。\n            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeSources);\n            /// 执行被加入的block\n            __CFRunLoopDoBlocks(runloop, currentMode);\n            \n            /// 4. RunLoop 触发 Source0 (非port) 回调。\n            sourceHandledThisLoop = __CFRunLoopDoSources0(runloop, currentMode, stopAfterHandle);\n            /// 执行被加入的block\n            __CFRunLoopDoBlocks(runloop, currentMode);\n \n            /// 5. 如果有 Source1 (基于port) 处于 ready 状态，直接处理这个 Source1 然后跳转去处理消息。\n            if (__Source0DidDispatchPortLastTime) {\n                Boolean hasMsg = __CFRunLoopServiceMachPort(dispatchPort, &msg)\n                if (hasMsg) goto handle_msg;\n            }\n            \n            /// 通知 Observers: RunLoop 的线程即将进入休眠(sleep)。\n            if (!sourceHandledThisLoop) {\n                __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeWaiting);\n            }\n            \n            /// 7. 调用 mach_msg 等待接受 mach_port 的消息。线程将进入休眠, 直到被下面某一个事件唤醒。\n            /// • 一个基于 port 的Source 的事件。\n            /// • 一个 Timer 到时间了\n            /// • RunLoop 自身的超时时间到了\n            /// • 被其他什么调用者手动唤醒\n            __CFRunLoopServiceMachPort(waitSet, &msg, sizeof(msg_buffer), &livePort) {\n                mach_msg(msg, MACH_RCV_MSG, port); // thread wait for receive msg\n            }\n \n            /// 8. 通知 Observers: RunLoop 的线程刚刚被唤醒了。\n            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopAfterWaiting);\n            \n            /// 收到消息，处理消息。\n            handle_msg:\n \n            /// 9.1 如果一个 Timer 到时间了，触发这个Timer的回调。\n            if (msg_is_timer) {\n                __CFRunLoopDoTimers(runloop, currentMode, mach_absolute_time())\n            } \n \n            /// 9.2 如果有dispatch到main_queue的block，执行block。\n            else if (msg_is_dispatch) {\n                __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);\n            } \n \n            /// 9.3 如果一个 Source1 (基于port) 发出事件了，处理这个事件\n            else {\n                CFRunLoopSourceRef source1 = __CFRunLoopModeFindSourceForMachPort(runloop, currentMode, livePort);\n                sourceHandledThisLoop = __CFRunLoopDoSource1(runloop, currentMode, source1, msg);\n                if (sourceHandledThisLoop) {\n                    mach_msg(reply, MACH_SEND_MSG, reply);\n                }\n            }\n            \n            /// 执行加入到Loop的block\n            __CFRunLoopDoBlocks(runloop, currentMode);\n            \n \n            if (sourceHandledThisLoop && stopAfterHandle) {\n                /// 进入loop时参数说处理完事件就返回。\n                retVal = kCFRunLoopRunHandledSource;\n            } else if (timeout) {\n                /// 超出传入参数标记的超时时间了\n                retVal = kCFRunLoopRunTimedOut;\n            } else if (__CFRunLoopIsStopped(runloop)) {\n                /// 被外部调用者强制停止了\n                retVal = kCFRunLoopRunStopped;\n            } else if (__CFRunLoopModeIsEmpty(runloop, currentMode)) {\n                /// source/timer/observer一个都没有了\n                retVal = kCFRunLoopRunFinished;\n            }\n            \n            /// 如果没超时，mode里没空，loop也没被停止，那继续loop。\n        } while (retVal == 0);\n    }\n    \n    /// 10. 通知 Observers: RunLoop 即将退出。\n    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br"),s("span",{staticClass:"line-number"},[e._v("40")]),s("br"),s("span",{staticClass:"line-number"},[e._v("41")]),s("br"),s("span",{staticClass:"line-number"},[e._v("42")]),s("br"),s("span",{staticClass:"line-number"},[e._v("43")]),s("br"),s("span",{staticClass:"line-number"},[e._v("44")]),s("br"),s("span",{staticClass:"line-number"},[e._v("45")]),s("br"),s("span",{staticClass:"line-number"},[e._v("46")]),s("br"),s("span",{staticClass:"line-number"},[e._v("47")]),s("br"),s("span",{staticClass:"line-number"},[e._v("48")]),s("br"),s("span",{staticClass:"line-number"},[e._v("49")]),s("br"),s("span",{staticClass:"line-number"},[e._v("50")]),s("br"),s("span",{staticClass:"line-number"},[e._v("51")]),s("br"),s("span",{staticClass:"line-number"},[e._v("52")]),s("br"),s("span",{staticClass:"line-number"},[e._v("53")]),s("br"),s("span",{staticClass:"line-number"},[e._v("54")]),s("br"),s("span",{staticClass:"line-number"},[e._v("55")]),s("br"),s("span",{staticClass:"line-number"},[e._v("56")]),s("br"),s("span",{staticClass:"line-number"},[e._v("57")]),s("br"),s("span",{staticClass:"line-number"},[e._v("58")]),s("br"),s("span",{staticClass:"line-number"},[e._v("59")]),s("br"),s("span",{staticClass:"line-number"},[e._v("60")]),s("br"),s("span",{staticClass:"line-number"},[e._v("61")]),s("br"),s("span",{staticClass:"line-number"},[e._v("62")]),s("br"),s("span",{staticClass:"line-number"},[e._v("63")]),s("br"),s("span",{staticClass:"line-number"},[e._v("64")]),s("br"),s("span",{staticClass:"line-number"},[e._v("65")]),s("br"),s("span",{staticClass:"line-number"},[e._v("66")]),s("br"),s("span",{staticClass:"line-number"},[e._v("67")]),s("br"),s("span",{staticClass:"line-number"},[e._v("68")]),s("br"),s("span",{staticClass:"line-number"},[e._v("69")]),s("br"),s("span",{staticClass:"line-number"},[e._v("70")]),s("br"),s("span",{staticClass:"line-number"},[e._v("71")]),s("br"),s("span",{staticClass:"line-number"},[e._v("72")]),s("br"),s("span",{staticClass:"line-number"},[e._v("73")]),s("br"),s("span",{staticClass:"line-number"},[e._v("74")]),s("br"),s("span",{staticClass:"line-number"},[e._v("75")]),s("br"),s("span",{staticClass:"line-number"},[e._v("76")]),s("br"),s("span",{staticClass:"line-number"},[e._v("77")]),s("br"),s("span",{staticClass:"line-number"},[e._v("78")]),s("br"),s("span",{staticClass:"line-number"},[e._v("79")]),s("br"),s("span",{staticClass:"line-number"},[e._v("80")]),s("br"),s("span",{staticClass:"line-number"},[e._v("81")]),s("br"),s("span",{staticClass:"line-number"},[e._v("82")]),s("br"),s("span",{staticClass:"line-number"},[e._v("83")]),s("br"),s("span",{staticClass:"line-number"},[e._v("84")]),s("br"),s("span",{staticClass:"line-number"},[e._v("85")]),s("br"),s("span",{staticClass:"line-number"},[e._v("86")]),s("br"),s("span",{staticClass:"line-number"},[e._v("87")]),s("br"),s("span",{staticClass:"line-number"},[e._v("88")]),s("br"),s("span",{staticClass:"line-number"},[e._v("89")]),s("br"),s("span",{staticClass:"line-number"},[e._v("90")]),s("br"),s("span",{staticClass:"line-number"},[e._v("91")]),s("br"),s("span",{staticClass:"line-number"},[e._v("92")]),s("br"),s("span",{staticClass:"line-number"},[e._v("93")]),s("br"),s("span",{staticClass:"line-number"},[e._v("94")]),s("br"),s("span",{staticClass:"line-number"},[e._v("95")]),s("br"),s("span",{staticClass:"line-number"},[e._v("96")]),s("br"),s("span",{staticClass:"line-number"},[e._v("97")]),s("br"),s("span",{staticClass:"line-number"},[e._v("98")]),s("br"),s("span",{staticClass:"line-number"},[e._v("99")]),s("br"),s("span",{staticClass:"line-number"},[e._v("100")]),s("br"),s("span",{staticClass:"line-number"},[e._v("101")]),s("br"),s("span",{staticClass:"line-number"},[e._v("102")]),s("br"),s("span",{staticClass:"line-number"},[e._v("103")]),s("br"),s("span",{staticClass:"line-number"},[e._v("104")]),s("br"),s("span",{staticClass:"line-number"},[e._v("105")]),s("br"),s("span",{staticClass:"line-number"},[e._v("106")]),s("br"),s("span",{staticClass:"line-number"},[e._v("107")]),s("br"),s("span",{staticClass:"line-number"},[e._v("108")]),s("br"),s("span",{staticClass:"line-number"},[e._v("109")]),s("br"),s("span",{staticClass:"line-number"},[e._v("110")]),s("br")])]),s("p",[e._v("可以看到，实际上 RunLoop 就是这样一个函数，其内部是一个 do-while 循环。当你调用 "),s("code",[e._v("CFRunLoopRun()")]),e._v(" 时，线程就会一直停留在这个循环里；直到超时或被手动停止，该函数才会返回。")]),e._v(" "),s("h2",{attrs:{id:"runloop-的底层实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#runloop-的底层实现"}},[e._v("#")]),e._v(" RunLoop 的底层实现")]),e._v(" "),s("p",[e._v("从上面代码可以看到，RunLoop 的核心是基于 mach port 的，其进入休眠时调用的函数是 "),s("code",[e._v("mach_msg()")]),e._v("。为了解释这个逻辑，下面稍微介绍一下 OSX/iOS 的系统架构。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ww4.sinaimg.cn/large/7853084cjw1fa7xzae9dlj206203nwel.jpg",alt:""}})]),e._v(" "),s("p",[e._v("苹果官方将整个系统大致划分为上述4个层次：")]),e._v(" "),s("p",[e._v("应用层包括用户能接触到的图形应用，例如 Spotlight、Aqua、SpringBoard 等。")]),e._v(" "),s("p",[e._v("应用框架层即开发人员接触到的 Cocoa 等框架。")]),e._v(" "),s("p",[e._v("核心框架层包括各种核心框架、OpenGL 等内容。")]),e._v(" "),s("p",[e._v("Darwin 即操作系统的核心，包括系统内核、驱动、Shell 等内容，这一层是开源的，其所有源码都可以在 "),s("a",{attrs:{href:"https://opensource.apple.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("opensource.apple.com"),s("OutboundLink")],1),e._v(" 里找到。")]),e._v(" "),s("p",[e._v("我们在深入看一下 Darwin 这个核心的架构：")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ww4.sinaimg.cn/large/7853084cjw1fa7xzt0n5wj2070060wel.jpg",alt:""}})]),e._v(" "),s("p",[e._v("其中，在硬件层上面的三个组成部分：Mach、BSD、IOKit (还包括一些上面没标注的内容)，共同组成了 XNU 内核。\nXNU 内核的内环被称作 Mach，其作为一个微内核，仅提供了诸如处理器调度、IPC (进程间通信)等非常少量的基础服务。\nBSD 层可以看作围绕 Mach 层的一个外环，其提供了诸如进程管理、文件系统和网络等功能。\nIOKit 层是为设备驱动提供了一个面向对象(C++)的一个框架。")]),e._v(" "),s("p",[e._v('Mach 本身提供的 API 非常有限，而且苹果也不鼓励使用 Mach 的 API，但是这些API非常基础，如果没有这些API的话，其他任何工作都无法实施。在 Mach 中，所有的东西都是通过自己的对象实现的，进程、线程和虚拟内存都被称为"对象"。和其他架构不同， Mach 的对象间不能直接调用，只能通过消息传递的方式实现对象间的通信。"消息"是 Mach 中最基础的概念，消息在两个端口 (port) 之间传递，这就是 Mach 的 '),s("code",[e._v("IPC (进程间通信)")]),e._v(" 的核心。")]),e._v(" "),s("p",[e._v("Mach 的消息定义是在 "),s("code",[e._v("<mach/message.h>")]),e._v(" 头文件的，很简单：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("typedef struct {\n  mach_msg_header_t header;\n  mach_msg_body_t body;\n} mach_msg_base_t;\n \ntypedef struct {\n  mach_msg_bits_t msgh_bits;\n  mach_msg_size_t msgh_size;\n  mach_port_t msgh_remote_port;\n  mach_port_t msgh_local_port;\n  mach_port_name_t msgh_voucher_port;\n  mach_msg_id_t msgh_id;\n} mach_msg_header_t;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("p",[e._v("一条 Mach 消息实际上就是一个二进制数据包 (BLOB)，其头部定义了当前端口 "),s("code",[e._v("local_port")]),e._v(" 和目标端口 "),s("code",[e._v("remote_port")]),e._v("，")]),e._v(" "),s("p",[e._v("发送和接受消息是通过同一个 API 进行的，其 option 标记了消息传递的方向：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mach_msg_return_t mach_msg(\n\t\t\tmach_msg_header_t *msg,\n\t\t\tmach_msg_option_t option,\n\t\t\tmach_msg_size_t send_size,\n\t\t\tmach_msg_size_t rcv_size,\n\t\t\tmach_port_name_t rcv_name,\n\t\t\tmach_msg_timeout_t timeout,\n\t\t\tmach_port_name_t notify);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("为了实现消息的发送和接收，"),s("code",[e._v("mach_msg()")]),e._v(" 函数实际上是调用了一个 Mach 陷阱 (trap)，即函数 "),s("code",[e._v("mach_msg_trap()")]),e._v("，陷阱这个概念在 Mach 中等同于系统调用。当你在用户态调用 "),s("code",[e._v("mach_msg_trap()")]),e._v(" 时会触发陷阱机制，切换到内核态；内核态中内核实现的 "),s("code",[e._v("mach_msg()")]),e._v(" 函数会完成实际的工作，如下图：")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://blog.ibireme.com/wp-content/uploads/2015/05/RunLoop_5.png",alt:""}})]),e._v(" "),s("p",[e._v("这些概念可以参考维基百科: "),s("a",{attrs:{href:"http://en.wikipedia.org/wiki/System_call",target:"_blank",rel:"noopener noreferrer"}},[e._v("System_call"),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"http://en.wikipedia.org/wiki/Trap_(computing)",target:"_blank",rel:"noopener noreferrer"}},[e._v("Trap_(computing)"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[e._v("RunLoop 的核心就是一个 "),s("code",[e._v("mach_msg()")]),e._v(" (见上面代码的第7步)，RunLoop 调用这个函数去接收消息，如果没有别人发送 port 消息过来，内核会将线程置于等待状态。例如你在模拟器里跑起一个 iOS 的 App，然后在 App 静止时点击暂停，你会看到主线程调用栈是停留在 "),s("code",[e._v("mach_msg_trap()")]),e._v(" 这个地方。")]),e._v(" "),s("p",[e._v("关于具体的如何利用 mach port 发送信息，可以看看 "),s("a",{attrs:{href:"http://nshipster.com/inter-process-communication/",target:"_blank",rel:"noopener noreferrer"}},[e._v("NSHipster 这一篇文章"),s("OutboundLink")],1),e._v("，或者"),s("a",{attrs:{href:"http://segmentfault.com/a/1190000002400329",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),s("OutboundLink")],1),e._v("的中文翻译 。")]),e._v(" "),s("p",[e._v("关于Mach的历史可以看看这篇很有趣的文章："),s("a",{attrs:{href:"http://www.programmer.com.cn/8121/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Mac OS X 背后的故事（三）Mach 之父 Avie Tevanian"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("h2",{attrs:{id:"苹果用-runloop-实现的功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#苹果用-runloop-实现的功能"}},[e._v("#")]),e._v(" 苹果用 RunLoop 实现的功能")]),e._v(" "),s("p",[e._v("首先我们可以看一下 App 启动后 RunLoop 的状态：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("CFRunLoop {\n    current mode = kCFRunLoopDefaultMode\n    common modes = {\n        UITrackingRunLoopMode\n        kCFRunLoopDefaultMode\n    }\n \n    common mode items = {\n \n        // source0 (manual)\n        CFRunLoopSource {order =-1, {\n            callout = _UIApplicationHandleEventQueue}}\n        CFRunLoopSource {order =-1, {\n            callout = PurpleEventSignalCallback }}\n        CFRunLoopSource {order = 0, {\n            callout = FBSSerialQueueRunLoopSourceHandler}}\n \n        // source1 (mach port)\n        CFRunLoopSource {order = 0,  {port = 17923}}\n        CFRunLoopSource {order = 0,  {port = 12039}}\n        CFRunLoopSource {order = 0,  {port = 16647}}\n        CFRunLoopSource {order =-1, {\n            callout = PurpleEventCallback}}\n        CFRunLoopSource {order = 0, {port = 2407,\n            callout = _ZL20notify_port_callbackP12__CFMachPortPvlS1_}}\n        CFRunLoopSource {order = 0, {port = 1c03,\n            callout = __IOHIDEventSystemClientAvailabilityCallback}}\n        CFRunLoopSource {order = 0, {port = 1b03,\n            callout = __IOHIDEventSystemClientQueueCallback}}\n        CFRunLoopSource {order = 1, {port = 1903,\n            callout = __IOMIGMachPortPortCallback}}\n \n        // Ovserver\n        CFRunLoopObserver {order = -2147483647, activities = 0x1, // Entry\n            callout = _wrapRunLoopWithAutoreleasePoolHandler}\n        CFRunLoopObserver {order = 0, activities = 0x20,          // BeforeWaiting\n            callout = _UIGestureRecognizerUpdateObserver}\n        CFRunLoopObserver {order = 1999000, activities = 0xa0,    // BeforeWaiting | Exit\n            callout = _afterCACommitHandler}\n        CFRunLoopObserver {order = 2000000, activities = 0xa0,    // BeforeWaiting | Exit\n            callout = _ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv}\n        CFRunLoopObserver {order = 2147483647, activities = 0xa0, // BeforeWaiting | Exit\n            callout = _wrapRunLoopWithAutoreleasePoolHandler}\n \n        // Timer\n        CFRunLoopTimer {firing = No, interval = 3.1536e+09, tolerance = 0,\n            next fire date = 453098071 (-4421.76019 @ 96223387169499),\n            callout = _ZN2CAL14timer_callbackEP16__CFRunLoopTimerPv (QuartzCore.framework)}\n    },\n \n    modes ＝ {\n        CFRunLoopMode  {\n            sources0 =  { /* same as 'common mode items' */ },\n            sources1 =  { /* same as 'common mode items' */ },\n            observers = { /* same as 'common mode items' */ },\n            timers =    { /* same as 'common mode items' */ },\n        },\n \n        CFRunLoopMode  {\n            sources0 =  { /* same as 'common mode items' */ },\n            sources1 =  { /* same as 'common mode items' */ },\n            observers = { /* same as 'common mode items' */ },\n            timers =    { /* same as 'common mode items' */ },\n        },\n \n        CFRunLoopMode  {\n            sources0 = {\n                CFRunLoopSource {order = 0, {\n                    callout = FBSSerialQueueRunLoopSourceHandler}}\n            },\n            sources1 = (null),\n            observers = {\n                CFRunLoopObserver >{activities = 0xa0, order = 2000000,\n                    callout = _ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv}\n            )},\n            timers = (null),\n        },\n \n        CFRunLoopMode  {\n            sources0 = {\n                CFRunLoopSource {order = -1, {\n                    callout = PurpleEventSignalCallback}}\n            },\n            sources1 = {\n                CFRunLoopSource {order = -1, {\n                    callout = PurpleEventCallback}}\n            },\n            observers = (null),\n            timers = (null),\n        },\n        \n        CFRunLoopMode  {\n            sources0 = (null),\n            sources1 = (null),\n            observers = (null),\n            timers = (null),\n        }\n    }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br"),s("span",{staticClass:"line-number"},[e._v("40")]),s("br"),s("span",{staticClass:"line-number"},[e._v("41")]),s("br"),s("span",{staticClass:"line-number"},[e._v("42")]),s("br"),s("span",{staticClass:"line-number"},[e._v("43")]),s("br"),s("span",{staticClass:"line-number"},[e._v("44")]),s("br"),s("span",{staticClass:"line-number"},[e._v("45")]),s("br"),s("span",{staticClass:"line-number"},[e._v("46")]),s("br"),s("span",{staticClass:"line-number"},[e._v("47")]),s("br"),s("span",{staticClass:"line-number"},[e._v("48")]),s("br"),s("span",{staticClass:"line-number"},[e._v("49")]),s("br"),s("span",{staticClass:"line-number"},[e._v("50")]),s("br"),s("span",{staticClass:"line-number"},[e._v("51")]),s("br"),s("span",{staticClass:"line-number"},[e._v("52")]),s("br"),s("span",{staticClass:"line-number"},[e._v("53")]),s("br"),s("span",{staticClass:"line-number"},[e._v("54")]),s("br"),s("span",{staticClass:"line-number"},[e._v("55")]),s("br"),s("span",{staticClass:"line-number"},[e._v("56")]),s("br"),s("span",{staticClass:"line-number"},[e._v("57")]),s("br"),s("span",{staticClass:"line-number"},[e._v("58")]),s("br"),s("span",{staticClass:"line-number"},[e._v("59")]),s("br"),s("span",{staticClass:"line-number"},[e._v("60")]),s("br"),s("span",{staticClass:"line-number"},[e._v("61")]),s("br"),s("span",{staticClass:"line-number"},[e._v("62")]),s("br"),s("span",{staticClass:"line-number"},[e._v("63")]),s("br"),s("span",{staticClass:"line-number"},[e._v("64")]),s("br"),s("span",{staticClass:"line-number"},[e._v("65")]),s("br"),s("span",{staticClass:"line-number"},[e._v("66")]),s("br"),s("span",{staticClass:"line-number"},[e._v("67")]),s("br"),s("span",{staticClass:"line-number"},[e._v("68")]),s("br"),s("span",{staticClass:"line-number"},[e._v("69")]),s("br"),s("span",{staticClass:"line-number"},[e._v("70")]),s("br"),s("span",{staticClass:"line-number"},[e._v("71")]),s("br"),s("span",{staticClass:"line-number"},[e._v("72")]),s("br"),s("span",{staticClass:"line-number"},[e._v("73")]),s("br"),s("span",{staticClass:"line-number"},[e._v("74")]),s("br"),s("span",{staticClass:"line-number"},[e._v("75")]),s("br"),s("span",{staticClass:"line-number"},[e._v("76")]),s("br"),s("span",{staticClass:"line-number"},[e._v("77")]),s("br"),s("span",{staticClass:"line-number"},[e._v("78")]),s("br"),s("span",{staticClass:"line-number"},[e._v("79")]),s("br"),s("span",{staticClass:"line-number"},[e._v("80")]),s("br"),s("span",{staticClass:"line-number"},[e._v("81")]),s("br"),s("span",{staticClass:"line-number"},[e._v("82")]),s("br"),s("span",{staticClass:"line-number"},[e._v("83")]),s("br"),s("span",{staticClass:"line-number"},[e._v("84")]),s("br"),s("span",{staticClass:"line-number"},[e._v("85")]),s("br"),s("span",{staticClass:"line-number"},[e._v("86")]),s("br"),s("span",{staticClass:"line-number"},[e._v("87")]),s("br"),s("span",{staticClass:"line-number"},[e._v("88")]),s("br"),s("span",{staticClass:"line-number"},[e._v("89")]),s("br"),s("span",{staticClass:"line-number"},[e._v("90")]),s("br"),s("span",{staticClass:"line-number"},[e._v("91")]),s("br"),s("span",{staticClass:"line-number"},[e._v("92")]),s("br"),s("span",{staticClass:"line-number"},[e._v("93")]),s("br"),s("span",{staticClass:"line-number"},[e._v("94")]),s("br"),s("span",{staticClass:"line-number"},[e._v("95")]),s("br"),s("span",{staticClass:"line-number"},[e._v("96")]),s("br"),s("span",{staticClass:"line-number"},[e._v("97")]),s("br"),s("span",{staticClass:"line-number"},[e._v("98")]),s("br"),s("span",{staticClass:"line-number"},[e._v("99")]),s("br")])]),s("p",[e._v("可以看到，系统默认注册了5个Mode:")]),e._v(" "),s("ol",[s("li",[e._v("kCFRunLoopDefaultMode: App的默认 Mode，通常主线程是在这个 Mode 下运行的。")]),e._v(" "),s("li",[e._v("UITrackingRunLoopMode: 界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响。")]),e._v(" "),s("li",[e._v("UIInitializationRunLoopMode: 在刚启动 App 时第进入的第一个 Mode，启动完成后就不再使用。")]),e._v(" "),s("li",[e._v("GSEventReceiveRunLoopMode: 接受系统事件的内部 Mode，通常用不到。")]),e._v(" "),s("li",[e._v("kCFRunLoopCommonModes: 这是一个占位的 Mode，没有实际作用。")])]),e._v(" "),s("p",[e._v("你可以在"),s("a",{attrs:{href:"http://iphonedevwiki.net/index.php/CFRunLoop",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),s("OutboundLink")],1),e._v("看到更多的苹果内部的 Mode，但那些 Mode 在开发中就很难遇到了。")]),e._v(" "),s("p",[e._v("当 RunLoop 进行回调时，一般都是通过一个很长的函数调用出去 (call out), 当你在你的代码中下断点调试时，通常能在调用栈上看到这些函数。下面是这几个函数的整理版本，如果你在调用栈中看到这些长函数名，在这里查找一下就能定位到具体的调用地点了：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("{\n    /// 1. 通知Observers，即将进入RunLoop\n    /// 此处有Observer会创建AutoreleasePool: _objc_autoreleasePoolPush();\n    __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopEntry);\n    do {\n \n        /// 2. 通知 Observers: 即将触发 Timer 回调。\n        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeTimers);\n        /// 3. 通知 Observers: 即将触发 Source (非基于port的,Source0) 回调。\n        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeSources);\n        __CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__(block);\n \n        /// 4. 触发 Source0 (非基于port的) 回调。\n        __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__(source0);\n        __CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__(block);\n \n        /// 6. 通知Observers，即将进入休眠\n        /// 此处有Observer释放并新建AutoreleasePool: _objc_autoreleasePoolPop(); _objc_autoreleasePoolPush();\n        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeWaiting);\n \n        /// 7. sleep to wait msg.\n        mach_msg() -> mach_msg_trap();\n        \n \n        /// 8. 通知Observers，线程被唤醒\n        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopAfterWaiting);\n \n        /// 9. 如果是被Timer唤醒的，回调Timer\n        __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__(timer);\n \n        /// 9. 如果是被dispatch唤醒的，执行所有调用 dispatch_async 等方法放入main queue 的 block\n        __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(dispatched_block);\n \n        /// 9. 如果如果Runloop是被 Source1 (基于port的) 的事件唤醒了，处理这个事件\n        __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__(source1);\n \n \n    } while (...);\n \n    /// 10. 通知Observers，即将退出RunLoop\n    /// 此处有Observer释放AutoreleasePool: _objc_autoreleasePoolPop();\n    __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopExit);\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br"),s("span",{staticClass:"line-number"},[e._v("40")]),s("br"),s("span",{staticClass:"line-number"},[e._v("41")]),s("br"),s("span",{staticClass:"line-number"},[e._v("42")]),s("br"),s("span",{staticClass:"line-number"},[e._v("43")]),s("br")])]),s("h4",{attrs:{id:"autoreleasepool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#autoreleasepool"}},[e._v("#")]),e._v(" AutoreleasePool")]),e._v(" "),s("p",[e._v("App启动后，苹果在主线程 RunLoop 里注册了两个 Observer，其回调都是 "),s("code",[e._v("_wrapRunLoopWithAutoreleasePoolHandler()")]),e._v("。")]),e._v(" "),s("p",[e._v("第一个 Observer 监视的事件是 Entry(即将进入Loop)，其回调内会调用 "),s("code",[e._v("_objc_autoreleasePoolPush()")]),e._v(" 创建自动释放池。其 order 是-2147483647，优先级最高，保证创建释放池发生在其他所有回调之前。")]),e._v(" "),s("p",[e._v("第二个 Observer 监视了两个事件： BeforeWaiting(准备进入休眠) 时调用"),s("code",[e._v("_objc_autoreleasePoolPop()")]),e._v(" 和 "),s("code",[e._v("_objc_autoreleasePoolPush()")]),e._v(" 释放旧的池并创建新池；Exit(即将退出Loop) 时调用 "),s("code",[e._v("_objc_autoreleasePoolPop()")]),e._v(" 来释放自动释放池。这个 Observer 的 order 是 2147483647（"),s("code",[e._v("2^31-1")]),e._v("\n），优先级最低，保证其释放池子发生在其他所有回调之后。")]),e._v(" "),s("p",[e._v("在主线程执行的代码，通常是写在诸如事件回调、Timer回调内的。这些回调会被 RunLoop 创建好的 AutoreleasePool 环绕着，所以不会出现内存泄漏，开发者也不必显示创建 Pool 了。")]),e._v(" "),s("h4",{attrs:{id:"事件响应"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件响应"}},[e._v("#")]),e._v(" 事件响应")]),e._v(" "),s("p",[e._v("苹果注册了一个 Source1 (基于 mach port 的) 用来接收系统事件，其回调函数为 "),s("code",[e._v("__IOHIDEventSystemClientQueueCallback()")]),e._v("。")]),e._v(" "),s("p",[e._v("当一个硬件事件(触摸/锁屏/摇晃等)发生后，首先由 "),s("code",[e._v("IOKit.framework")]),e._v(" 生成一个 IOHIDEvent 事件并由 SpringBoard 接收。这个过程的详细情况可以参考"),s("a",{attrs:{href:"http://iphonedevwiki.net/index.php/IOHIDFamily",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),s("OutboundLink")],1),e._v("。SpringBoard 只接收按键(锁屏/静音等)，触摸，加速，接近传感器等几种 Event，随后用 mach port 转发给需要的App进程。随后苹果注册的那个 Source1 就会触发回调，并调用 "),s("code",[e._v("_UIApplicationHandleEventQueue()")]),e._v(" 进行应用内部的分发。")]),e._v(" "),s("p",[s("code",[e._v("_UIApplicationHandleEventQueue()")]),e._v(" 会把 IOHIDEvent 处理并包装成 UIEvent 进行处理或分发，其中包括识别 UIGesture/处理屏幕旋转/发送给 UIWindow 等。通常事件比如 UIButton 点击、touchesBegin/Move/End/Cancel 事件都是在这个回调中完成的。")]),e._v(" "),s("h4",{attrs:{id:"手势识别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#手势识别"}},[e._v("#")]),e._v(" 手势识别")]),e._v(" "),s("p",[e._v("当上面的 "),s("code",[e._v("_UIApplicationHandleEventQueue()")]),e._v(" 识别了一个手势时，其首先会调用 Cancel 将当前的 touchesBegin/Move/End 系列回调打断。随后系统将对应的 UIGestureRecognizer 标记为待处理。")]),e._v(" "),s("p",[e._v("苹果注册了一个 Observer 监测 BeforeWaiting (Loop即将进入休眠) 事件，这个Observer的回调函数是 "),s("code",[e._v("_UIGestureRecognizerUpdateObserver()")]),e._v("，其内部会获取所有刚被标记为待处理的 GestureRecognizer，并执行GestureRecognizer的回调。")]),e._v(" "),s("p",[e._v("当有 UIGestureRecognizer 的变化(创建/销毁/状态改变)时，这个回调都会进行相应处理。")]),e._v(" "),s("h4",{attrs:{id:"界面更新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#界面更新"}},[e._v("#")]),e._v(" 界面更新")]),e._v(" "),s("p",[e._v("当在操作 UI 时，比如改变了 Frame、更新了 UIView/CALayer 的层次时，或者手动调用了 UIView/CALayer 的 "),s("code",[e._v("setNeedsLayout/setNeedsDisplay")]),e._v("方法后，这个 UIView/CALayer 就被标记为待处理，并被提交到一个全局的容器去。")]),e._v(" "),s("p",[e._v("苹果注册了一个 Observer 监听 BeforeWaiting(即将进入休眠) 和 Exit (即将退出Loop) 事件，回调去执行一个很长的函数：\n"),s("code",[e._v("_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()")]),e._v("。这个函数里会遍历所有待处理的 UIView/CALayer 以执行实际的绘制和调整，并更新 UI 界面。")]),e._v(" "),s("p",[e._v("这个函数内部的调用栈大概是这样的：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()\n    QuartzCore:CA::Transaction::observer_callback:\n        CA::Transaction::commit();\n            CA::Context::commit_transaction();\n                CA::Layer::layout_and_display_if_needed();\n                    CA::Layer::layout_if_needed();\n                        [CALayer layoutSublayers];\n                            [UIView layoutSubviews];\n                    CA::Layer::display_if_needed();\n                        [CALayer display];\n                            [UIView drawRect];\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("h4",{attrs:{id:"定时器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定时器"}},[e._v("#")]),e._v(" 定时器")]),e._v(" "),s("p",[s("strong",[e._v("NSTimer")]),e._v(" 其实就是 CFRunLoopTimerRef，他们之间是 toll-free bridged 的。一个 NSTimer 注册到 RunLoop 后，RunLoop 会为其重复的时间点注册好事件。例如 10:00, 10:10, 10:20 这几个时间点。RunLoop为了节省资源，并不会在非常准确的时间点回调这个Timer。Timer 有个属性叫做 Tolerance (宽容度)，标示了当时间点到后，容许有多少最大误差。")]),e._v(" "),s("p",[e._v("如果某个时间点被错过了，例如执行了一个很长的任务，则那个时间点的回调也会跳过去，不会延后执行。就比如等公交，如果 10:10 时我忙着玩手机错过了那个点的公交，那我只能等 10:20 这一趟了。")]),e._v(" "),s("p",[s("strong",[e._v("CADisplayLink")]),e._v(" 是一个和屏幕刷新率一致的定时器（但实际实现原理更复杂，和 NSTimer 并不一样，其内部实际是操作了一个 Source）。如果在两次屏幕刷新之间执行了一个长任务，那其中就会有一帧被跳过去（和 NSTimer 相似），造成界面卡顿的感觉。在快速滑动TableView时，即使一帧的卡顿也会让用户有所察觉。Facebook 开源的 AsyncDisplayLink 就是为了解决界面卡顿的问题，其内部也用到了 RunLoop，这个稍后我会再单独写一页博客来分析。")]),e._v(" "),s("h4",{attrs:{id:"performselecter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#performselecter"}},[e._v("#")]),e._v(" PerformSelecter")]),e._v(" "),s("p",[e._v("当调用 NSObject 的 "),s("code",[e._v("performSelecter:afterDelay:")]),e._v(" 后，实际上其内部会创建一个 Timer 并添加到当前线程的 RunLoop 中。所以如果当前线程没有 RunLoop，则这个方法会失效。")]),e._v(" "),s("p",[e._v("当调用 "),s("code",[e._v("performSelector:onThread:")]),e._v(" 时，实际上其会创建一个 Timer 加到对应的线程去，同样的，如果对应线程没有 RunLoop 该方法也会失效。")]),e._v(" "),s("h4",{attrs:{id:"关于gcd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于gcd"}},[e._v("#")]),e._v(" 关于GCD")]),e._v(" "),s("p",[e._v("实际上 RunLoop 底层也会用到 GCD 的东西，"),s("s",[e._v("比如 RunLoop 是用 dispatch_source_t 实现的 Timer")]),e._v("（评论中有人提醒，NSTimer 是用了 XNU 内核的 mk_timer，我也仔细调试了一下，发现 NSTimer 确实是由 mk_timer 驱动，而非 GCD 驱动的）。但同时 GCD 提供的某些接口也用到了 RunLoop， 例如 dispatch_async()。")]),e._v(" "),s("p",[e._v("当调用 "),s("code",[e._v("dispatch_async(dispatch_get_main_queue(), block)")]),e._v(" 时，libDispatch 会向主线程的 RunLoop 发送消息，RunLoop会被唤醒，并从消息中取得这个 block，并在回调 "),s("code",[e._v("__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__()")]),e._v(" 里执行这个 block。但这个逻辑仅限于 dispatch 到主线程，dispatch 到其他线程仍然是由 libDispatch 处理的。")]),e._v(" "),s("h4",{attrs:{id:"关于网络请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于网络请求"}},[e._v("#")]),e._v(" 关于网络请求")]),e._v(" "),s("p",[e._v("iOS 中，关于网络请求的接口自下至上有如下几层:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("CFSocket\nCFNetwork       ->ASIHttpRequest\nNSURLConnection ->AFNetworking\nNSURLSession    ->AFNetworking2, Alamofire\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("ul",[s("li",[e._v("CFSocket 是最底层的接口，只负责 socket 通信。")]),e._v(" "),s("li",[e._v("CFNetwork 是基于 CFSocket 等接口的上层封装，ASIHttpRequest 工作于这一层。")]),e._v(" "),s("li",[e._v("NSURLConnection 是基于 CFNetwork 的更高层的封装，提供面向对象的接口，AFNetworking 工作于这一层。")]),e._v(" "),s("li",[e._v("NSURLSession 是 iOS7 中新增的接口，表面上是和 NSURLConnection 并列的，但底层仍然用到了 NSURLConnection 的部分功能 (比如 "),s("code",[e._v("com.apple.NSURLConnectionLoader")]),e._v(" 线程)，AFNetworking2 和 Alamofire 工作于这一层。")])]),e._v(" "),s("p",[e._v("下面主要介绍下 NSURLConnection 的工作过程。")]),e._v(" "),s("p",[e._v("通常使用 NSURLConnection 时，你会传入一个 Delegate，当调用了 "),s("code",[e._v("[connection start]")]),e._v(" 后，这个 Delegate 就会不停收到事件回调。实际上，start 这个函数的内部会会获取 CurrentRunLoop，然后在其中的 DefaultMode 添加了4个 Source0 (即需要手动触发的Source)。CFMultiplexerSource 是负责各种 Delegate 回调的，CFHTTPCookieStorage 是处理各种 Cookie 的。")]),e._v(" "),s("p",[e._v("当开始网络传输时，我们可以看到 NSURLConnection 创建了两个新线程：com.apple.NSURLConnectionLoader 和 com.apple.CFSocket.private。其中 CFSocket 线程是处理底层 socket 连接的。NSURLConnectionLoader 这个线程内部会使用 RunLoop 来接收底层 socket 的事件，并通过之前添加的 Source0 通知到上层的 Delegate。")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://ww3.sinaimg.cn/large/7853084cjw1fa7xj3vs8ij20hs0cdt9m.jpg",alt:""}})]),e._v(" "),s("p",[e._v("NSURLConnectionLoader 中的 RunLoop 通过一些基于 mach port 的 Source 接收来自底层 CFSocket 的通知。当收到通知后，其会在合适的时机向 CFMultiplexerSource 等 Source0 发送通知，同时唤醒 Delegate 线程的 RunLoop 来让其处理这些通知。CFMultiplexerSource 会在 Delegate 线程的 RunLoop 对 Delegate 执行实际的回调。")]),e._v(" "),s("h2",{attrs:{id:"runloop-的实际应用举例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#runloop-的实际应用举例"}},[e._v("#")]),e._v(" RunLoop 的实际应用举例")]),e._v(" "),s("h4",{attrs:{id:"afnetworking"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#afnetworking"}},[e._v("#")]),e._v(" AFNetworking")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/AFNetworking/AFNetworking",target:"_blank",rel:"noopener noreferrer"}},[e._v("AFURLConnectionOperation"),s("OutboundLink")],1),e._v(" 这个类是基于 NSURLConnection 构建的，其希望能在后台线程接收 Delegate 回调。为此 AFNetworking 单独创建了一个线程，并在这个线程中启动了一个 RunLoop：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('+ (void)networkRequestThreadEntryPoint:(id)__unused object {\n    @autoreleasepool {\n        [[NSThread currentThread] setName:@"AFNetworking"];\n        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];\n        [runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];\n        [runLoop run];\n    }\n}\n \n+ (NSThread *)networkRequestThread {\n    static NSThread *_networkRequestThread = nil;\n    static dispatch_once_t oncePredicate;\n    dispatch_once(&oncePredicate, ^{\n        _networkRequestThread = [[NSThread alloc] initWithTarget:self selector:@selector(networkRequestThreadEntryPoint:) object:nil];\n        [_networkRequestThread start];\n    });\n    return _networkRequestThread;\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br")])]),s("p",[e._v("RunLoop 启动前内部必须要有至少一个 Timer/Observer/Source，所以 AFNetworking 在 [runLoop run] 之前先创建了一个新的 NSMachPort 添加进去了。通常情况下，调用者需要持有这个 NSMachPort (mach_port) 并在外部线程通过这个 port 发送消息到 loop 内；但此处添加 port 只是为了让 RunLoop 不至于退出，并没有用于实际的发送消息。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("- (void)start {\n    [self.lock lock];\n    if ([self isCancelled]) {\n        [self performSelector:@selector(cancelConnection) onThread:[[self class] networkRequestThread] withObject:nil waitUntilDone:NO modes:[self.runLoopModes allObjects]];\n    } else if ([self isReady]) {\n        self.state = AFOperationExecutingState;\n        [self performSelector:@selector(operationDidStart) onThread:[[self class] networkRequestThread] withObject:nil waitUntilDone:NO modes:[self.runLoopModes allObjects]];\n    }\n    [self.lock unlock];\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("当需要这个后台线程执行任务时，AFNetworking 通过调用 [NSObject performSelector:onThread:..] 将这个任务扔到了后台线程的 RunLoop 中。")]),e._v(" "),s("h4",{attrs:{id:"asyncdisplaykit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#asyncdisplaykit"}},[e._v("#")]),e._v(" AsyncDisplayKit")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/facebook/AsyncDisplayKit",target:"_blank",rel:"noopener noreferrer"}},[e._v("AsyncDisplayKit"),s("OutboundLink")],1),e._v(" 是 Facebook 推出的用于保持界面流畅性的框架，其原理大致如下：")]),e._v(" "),s("p",[e._v("UI 线程中一旦出现繁重的任务就会导致界面卡顿，这类任务通常分为3类：排版，绘制，UI对象操作。")]),e._v(" "),s("p",[e._v("排版通常包括计算视图大小、计算文本高度、重新计算子式图的排版等操作。")]),e._v(" "),s("p",[e._v("绘制一般有文本绘制 (例如 CoreText)、图片绘制 (例如预先解压)、元素绘制 (Quartz)等操作。")]),e._v(" "),s("p",[e._v("UI对象操作通常包括 UIView/CALayer 等 UI 对象的创建、设置属性和销毁。")]),e._v(" "),s("p",[e._v("其中前两类操作可以通过各种方法扔到后台线程执行，而最后一类操作只能在主线程完成，并且有时后面的操作需要依赖前面操作的结果 （例如TextView创建时可能需要提前计算出文本的大小）。ASDK 所做的，就是尽量将能放入后台的任务放入后台，不能的则尽量推迟 (例如视图的创建、属性的调整)。")]),e._v(" "),s("p",[e._v("为此，ASDK 创建了一个名为 ASDisplayNode 的对象，并在内部封装了 UIView/CALayer，它具有和 UIView/CALayer 相似的属性，例如 frame、backgroundColor等。所有这些属性都可以在后台线程更改，开发者可以只通过 Node 来操作其内部的 UIView/CALayer，这样就可以将排版和绘制放入了后台线程。但是无论怎么操作，这些属性总需要在某个时刻同步到主线程的 UIView/CALayer 去。")]),e._v(" "),s("p",[e._v("ASDK 仿照 QuartzCore/UIKit 框架的模式，实现了一套类似的界面更新的机制：即在主线程的 RunLoop 中添加一个 Observer，监听了 kCFRunLoopBeforeWaiting 和 kCFRunLoopExit 事件，在收到回调时，遍历所有之前放入队列的待处理的任务，然后一一执行。\n具体的代码可以看这里"),s("a",{attrs:{href:"https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit%2FDetails%2FTransactions%2F_ASAsyncTransactionGroup.m",target:"_blank",rel:"noopener noreferrer"}},[e._v("_ASAsyncTransactionGroup"),s("OutboundLink")],1),e._v("。")])])}),[],!1,null,null,null);n.default=r.exports}}]);