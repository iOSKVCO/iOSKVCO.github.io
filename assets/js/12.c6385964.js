(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{551:function(s,n,a){"use strict";a.r(n);var e=a(6),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),a("blockquote",[a("p",[s._v("在上一篇文章"),a("a",{attrs:{href:"http://www.jianshu.com/p/a36bfc976b8e",target:"_blank",rel:"noopener noreferrer"}},[s._v("《Objective-C Runtime详解》"),a("OutboundLink")],1),s._v("中我们探讨了Runtime的基本原理，这篇文章我们将总结一下Runtime的一些基本使用")])]),s._v(" "),a("h1",{attrs:{id:"使用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用方法"}},[s._v("#")]),s._v(" 使用方法")]),s._v(" "),a("ul",[a("li",[s._v("查询方法")]),s._v(" "),a("li",[s._v("给分类添加属性")]),s._v(" "),a("li",[s._v("更换代码的实现方法")]),s._v(" "),a("li",[s._v("动态添加方法")]),s._v(" "),a("li",[s._v("字典转属性")])]),s._v(" "),a("h1",{attrs:{id:"准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#准备"}},[s._v("#")]),s._v(" 准备")]),s._v(" "),a("p",[s._v("先创建两个类")]),s._v(" "),a("p",[a("code",[s._v("ClassA.h")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#import <Foundation/Foundation.h>\n\n@interface ClassA : NSObject {\n    // 公有变量\n    NSString *_publicVar1;\n    NSString *_publicVar2;\n\n}\n// 公有属性\n@property(nonatomic,copy) NSString *publicProperty1;\n@property(nonatomic,copy) NSString *publicProperty2;\n\n/* 公有方法 */\n-(void)methodAOfClassAWithArg:(NSString *)arg;\n\n@end\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[a("code",[s._v("ClassA.m")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#import "ClassA.h"\n\n@interface ClassA()\n// 私有属性\n@property(nonatomic,copy) NSString *privateProperty1;\n@property(nonatomic,copy) NSString *privateProperty2;\n\n@end\n\n@implementation ClassA {\n    // 私有变量\n    NSString *_privateVar1;\n    NSString *_privateVar2;\n}\n\n/* 公有方法 */\n-(void)methodAOfClassAWithArg:(NSString *)arg {\n    NSLog(@" methodAOfClassA arg = %@", arg);\n}\n\n/* 私有方法 */\n-(void)MethodBOfClassAWithArg:(NSString *)arg {\n    NSLog(@" methodBOfClassA arg = %@", arg);\n}\n@end\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("p",[a("code",[s._v("ClassB.h")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#import <Foundation/Foundation.h>\n\n@interface ClassB : NSObject\n\n/* 公有方法 */\n-(void)methodAOfClassBWithArg:(NSString *)arg;\n\n@end\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("code",[s._v("ClassB.m")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#import "ClassB.h"\n\n@implementation ClassB\n- (void)methodAOfClassBWithArg:(NSString *)arg {\n    NSLog(@" methodAOfClassB arg = %@", arg);\n}\n\n-(void)methodBOfClassBWithArg:(NSString *)arg {\n    NSLog(@" methodBOfClassB arg = %@", arg);\n}\n\n@end\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h2",{attrs:{id:"查询方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询方法"}},[s._v("#")]),s._v(" 查询方法")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("在Objective-C Runtime下没有真正意义上的私有变量和方法，因为这些私有变量和方法都可以通过Runtime方法获取，这当然包括系统的私有API。接下来我们来一一介绍获取类中属性和方法的方法。当然不要忘了"),a("code",[s._v("#import <objc/runtime.h>")]),s._v(".")]),s._v(" "),a("h4",{attrs:{id:"获取类的名称"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取类的名称"}},[s._v("#")]),s._v(" 获取类的名称")]),s._v(" "),a("p",[s._v("方法："),a("code",[s._v("const char *object_getClassName(id obj)")]),s._v("，使用比较简单，传入对象即可得到对应分类名。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('ClassA *classA = [[ClassA alloc] init];\nconst char *className = object_getClassName(classA);\nNSLog(@"className = %@", [NSString stringWithUTF8String:className]);\n\n//输出\nclassName = ClassA\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h4",{attrs:{id:"获取类中的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取类中的方法"}},[s._v("#")]),s._v(" 获取类中的方法")]),s._v(" "),a("p",[s._v("方法："),a("code",[s._v("Method *class_copyMethodList(Class cls, unsigned int *outCount)")])]),s._v(" "),a("p",[s._v("上代码：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('UInt32 count;\nchar dst;\nMethod *methods = class_copyMethodList([classA class], &count);//获取方法列表\nfor (int i = 0; i < count; i++) {\n    Method method = methods[i];// 获取方法\n    SEL methodName = method_getName(method);// 获取方法名\n    method_getReturnType(method, &dst, sizeof(char));// 获取方法返回类型\n    const char *methodType = method_getTypeEncoding(method);// 获取方法参数类型和返回类型\n    NSLog(@"methodName = %@",NSStringFromSelector(methodName));\n    NSLog(@"dst = %c", dst);\n}\n    \n // 输出\n methodName = methodAOfClassAWithArg:\n dst = v\n methodType = v24@0:8@16\n methodName = MethodBOfClassAWithArg:\n dst = v\n methodType = v24@0:8@16\n methodName = publicProperty1\n dst = @\n methodType = @16@0:8\n methodName = setPublicProperty1:\n dst = v\n methodType = v24@0:8@16\n methodName = publicProperty2\n dst = @\n methodType = @16@0:8\n methodName = setPublicProperty2:\n dst = v\n methodType = v24@0:8@16\n methodName = privateProperty1\n dst = @\n methodType = @16@0:8\n methodName = setPrivateProperty1:\n dst = v\n methodType = v24@0:8@16\n methodName = privateProperty2\n dst = @\n methodType = @16@0:8\n methodName = setPrivateProperty2:\n dst = v\n methodType = v24@0:8@16\n methodName = .cxx_destruct\n dst = v\n methodType = v16@0:8\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br")])]),a("p",[a("code",[s._v("class_copyMethodList([classA class], &count)")]),s._v(" 传入元类和计数器地址，返回方法列表。这里注意，返回的是"),a("code",[s._v("Method")]),s._v("结构体类型的C数组，"),a("code",[s._v("Method")]),s._v("类型我们在"),a("a",{attrs:{href:"http://www.jianshu.com/p/a36bfc976b8e",target:"_blank",rel:"noopener noreferrer"}},[s._v("上篇文章"),a("OutboundLink")],1),s._v("中已经详细说明，")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("typedef struct objc_method *Method;\n\nstruct objc_method {\n    SEL method_name                                          OBJC2_UNAVAILABLE;\n    char *method_types                                       OBJC2_UNAVAILABLE;\n    IMP method_imp                                           OBJC2_UNAVAILABLE;\n} \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("但要区分"),a("code",[s._v("Method *methods")]),s._v("与"),a("code",[s._v("Method method")]),s._v("的区别，这是比较基础C语言知识。还有"),a("code",[s._v("Uint32")]),s._v("是OC定义的"),a("code",[s._v("unsigned int")]),s._v("类型"),a("code",[s._v("typedef unsigned int UInt32;")])]),s._v(" "),a("p",[s._v("这里我们来看看 "),a("code",[s._v("method_getReturnType(method, &dst, sizeof(char))")]),s._v(" 方法简单输出返回值类型，输出为 "),a("code",[s._v("v")]),s._v(" 和 "),a("code",[s._v("@")]),s._v(" ,参考Apple文档可知道返回类型为 "),a("code",[s._v("void")]),s._v(" 和 "),a("code",[s._v("id")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("A void v\nA method selector (SEL)  ：\nAn object (whether statically typed or typed id) @ \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("code",[s._v("method_getTypeEncoding(method)")]),s._v("方法可以输出返回值，参数类型以及接收器类型。我们看输出的"),a("code",[s._v("v24@0:8@16")]),s._v("，分析上面的说明就可以知道： "),a("code",[s._v("v24")]),s._v("返回类型为"),a("code",[s._v("viod")]),s._v(","),a("code",[s._v("@0")]),s._v("接收器类型为"),a("code",[s._v("id")]),s._v(","),a("code",[s._v("@16")]),s._v("参数类型为"),a("code",[s._v("id")])]),s._v(" "),a("p",[s._v("至于类型后面的值观察可以发现都是相差8，我认为是在method中的位置，分别以8bit存储不同类型的数据。")]),s._v(" "),a("p",[s._v("若有两个参数返回值为 "),a("code",[s._v("v32@0:8@16@24")]),s._v(" ,对比可以猜测，在method中各个成员的排列是这样的： "),a("code",[s._v("接收器|SEl标识|参数1|参数2|...|返回值")]),s._v("，然后由 "),a("code",[s._v("method_getTypeEncoding(method)")]),s._v(" 输出的顺序为: "),a("code",[s._v("返回值类型|接收器类型|SEL标识|参数1|参数2|...")]),s._v(" 此处为个人见解，如有错误或不同意见欢迎提出探讨。")]),s._v(" "),a("p",[s._v("最后发现了一个奇怪的方法 "),a("code",[s._v(".cxx_destruct")]),s._v(" ,在中"),a("a",{attrs:{href:"http://my.safaribooksonline.com/book/programming/objective-c/9780132908641/3dot-memory-management/ch03",target:"_blank",rel:"noopener noreferrer"}},[s._v("这篇文章"),a("OutboundLink")],1),s._v("中：")]),s._v(" "),a("blockquote",[a("p",[s._v("ARC actually creates a -.cxx_destruct method to handle freeing instance variables. This method was originally created for calling C++ destructors automatically when an object was destroyed.")])]),s._v(" "),a("p",[s._v("和《Effective Objective-C 2.0》中提到的：")]),s._v(" "),a("blockquote",[a("p",[s._v("When the compiler saw that an object contained C++ objects, it would generate a method called .cxx_destruct. ARC piggybacks on this method and emits the required cleanup code within it.")])]),s._v(" "),a("p",[s._v("可以了解到，"),a("code",[s._v(".cxx_destruct")]),s._v(" 方法原本是为了C++对象析构的，ARC借用了这个方法插入代码实现了自动内存释放的工作")]),s._v(" "),a("p",[s._v("关于 "),a("code",[s._v(".cxx_destruct")]),s._v(" 可以参考这篇文章:"),a("a",{attrs:{href:"http://blog.jobbole.com/65028/",target:"_blank",rel:"noopener noreferrer"}},[s._v("ARC下dealloc过程及.cxx_destruct的探究"),a("OutboundLink")],1)]),s._v(" "),a("h4",{attrs:{id:"获取类中的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取类中的属性"}},[s._v("#")]),s._v(" 获取类中的属性")]),s._v(" "),a("p",[s._v("在 "),a("a",{attrs:{href:"http://www.jianshu.com/p/a36bfc976b8e",target:"_blank",rel:"noopener noreferrer"}},[s._v("上篇文章"),a("OutboundLink")],1),s._v(" 的 "),a("code",[s._v("Property")]),s._v(" 中我们也提到了获取类中的属性的方法，如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('id LenderClass = objc_getClass("ClassA");//获取classA 的元类同[ClassA class]\nunsigned int outCount;//属性数量\n// 获取属性列表\nobjc_property_t *properties = class_copyPropertyList(LenderClass, &outCount);\n\n// 遍历\nfor (int i = 0; i < outCount; i++) {\n\n    objc_property_t property = properties[i];\n    \n    const char *propertyName = property_getName(property);// 获取属性名\n    const char *propertyAttributes = property_getAttributes(property);// 获取属性描述\n    \n    printf("propertyName：%s \\n", propertyName);\n    printf("propertyAttributes:%s\\n--------\\n", propertyAttributes);//属性名及描述\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 输出\npropertyName：privateProperty1 \npropertyAttributes:T@"NSString",C,N,V_privateProperty1\n--------\npropertyName：privateProperty2 \npropertyAttributes:T@"NSString",C,N,V_privateProperty2\n--------\npropertyName：publicProperty1 \npropertyAttributes:T@"NSString",C,N,V_publicProperty1\n--------\npropertyName：publicProperty2 \npropertyAttributes:T@"NSString",C,N,V_publicProperty2\n--------\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("发现会输出公有属性以及私有属性。")]),s._v(" "),a("h4",{attrs:{id:"获取类中的成员变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取类中的成员变量"}},[s._v("#")]),s._v(" 获取类中的成员变量")]),s._v(" "),a("p",[s._v("我们可以发现获取类中的方法，属性过程基本一致：通过元类获取方法列表或属性列表，然后在进行遍历。获取成员变量也一样：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('id selfClass = [Calss class];\nunsigned int numIvars = 0;\nIvar *ivars = class_copyIvarList(selfClass, &numIvars);\nfor(int i = 0; i < numIvars; i++) {\n    Ivar ivar = ivars[i];\n    const char *ivarName = ivar_getName(ivar);\n    const char *ivarType = ivar_getTypeEncoding(ivar);// 获取类型\n    \n    printf("ivarName:%s\\n", ivarName);\n    printf("ivarType:%s\\n------\\n", ivarType);\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 输出\nivarName:_publicVar1\nivarType:@"NSString"\n------\nivarName:_publicVar2\nivarType:@"NSString"\n------\nivarName:_privateVar1\nivarType:@"NSString"\n------\nivarName:_privateVar2\nivarType:@"NSString"\n------\nivarName:_publicProperty1\nivarType:@"NSString"\n------\nivarName:_publicProperty2\nivarType:@"NSString"\n------\nivarName:_privateProperty1\nivarType:@"NSString"\n------\nivarName:_privateProperty2\nivarType:@\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("p",[s._v("可以发现输出了所有的成员变量，包括属性声明的 "),a("code",[s._v("_+属性名")]),s._v(" 变量。")]),s._v(" "),a("h2",{attrs:{id:"给分类添加属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#给分类添加属性"}},[s._v("#")]),s._v(" 给分类添加属性")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("众所周知，分类中是不能声明属性的。")]),s._v(" "),a("p",[s._v("我们创建一个 "),a("code",[s._v("CalssA")]),s._v(" 的分类 "),a("code",[s._v("ClassA+CategoryA")]),s._v(" ,在 "),a("code",[s._v("ClassA+CategoryA")]),s._v(" 中添加一个属性 "),a("code",[s._v("name")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#import "ClassA.h"\n\n@interface ClassA (CategoryA)\n\n@property (nonatomic, strong) NSString *name;\n\n@end\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("若在我们调用"),a("code",[s._v("CalssA")]),s._v("分类的"),a("code",[s._v("name")]),s._v(" 将会crash，原因是分类中使用 "),a("code",[s._v("@property")]),s._v(" 声明属性并不会生成"),a("code",[s._v("setter")]),s._v("和"),a("code",[s._v("getter")]),s._v("方法,但是我们会想，我们可以自己实现呀，没错，看下面的代码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#import "ClassA+CategoryA.h"\n#import <objc/runtime.h>\n\n@implementation ClassA (CategoryA)\n\n- (NSString *)name {\n    return name;\n}\n\n- (void)setName:(NSString *)name {\n    _name = name;\n}\n\n@end\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("这里会报编译错误，因为分类中使用 "),a("code",[s._v("@property")]),s._v(" 声明属性也不会生成成员变量 _name，并且手动声明也不行")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://ww1.sinaimg.cn/large/7853084cgw1f9zsknx42yj20fw033gm0.jpg",alt:""}})]),s._v(" "),a("p",[s._v("编译错误，提示实例变量无法添加到分类中，用正常的方法确实无法在分类中添加属性。")]),s._v(" "),a("p",[s._v("但是可以通过Runtim机制进行“添加”。其本质是给这个类添加属性关联，而非把这个属性添加到类中。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#import "ClassA+CategoryA.h"\n#import <objc/runtime.h>\n\n\n@implementation ClassA (CategoryA)\n\n- (NSString *)name {\n    return objc_getAssociatedObject(self, @selector(name));\n}\n\n- (void)setName:(NSString *)name {\n    objc_setAssociatedObject(self, @selector(name), name, OBJC_ASSOCIATION_COPY_NONATOMIC);\n}\n\n@end\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("调用：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('classA.name = @"邱帅";\nNSLog(@"%@",classA.name);\n\n// 输出\n2016-11-21 16:18:48.084 UseRuntime[4392:1325037] 邱帅\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("可以看出添加属性成功！")]),s._v(" "),a("p",[s._v("我们来看看关联属性的这几个方法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("OBJC_EXPORT void objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy)\n    OBJC_AVAILABLE(10.6, 3.1, 9.0, 1.0);\n    \nOBJC_EXPORT id objc_getAssociatedObject(id object, const void *key)\n    OBJC_AVAILABLE(10.6, 3.1, 9.0, 1.0);\n    \nOBJC_EXPORT void objc_removeAssociatedObjects(id object)\n    OBJC_AVAILABLE(10.6, 3.1, 9.0, 1.0);\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("code",[s._v("objc_setAssociatedObject()")]),s._v(" 方法为关联属性，参数如下：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("object")]),s._v("：属性关联的源对象，这里使用了"),a("code",[s._v("self")]),s._v("，代表关联本类的对象")]),s._v(" "),a("li",[a("code",[s._v("key")]),s._v(":区分属性的唯一标识，因为关联的属性可能不止一个，我们使用了"),a("code",[s._v("- (NSString *)name")]),s._v("方法的"),a("code",[s._v("SEL")]),s._v(" "),a("code",[s._v("@selector(name)")]),s._v("作为唯一标示，当然也可以用下面的方法来生成Key :")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//利用静态变量地址唯一不变的特性\n1、static void *strKey = &strKey;\n\n2、static NSString *strKey = @"strKey"; \n\n3、static char strKey;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("ul",[a("li",[a("code",[s._v("value")]),s._v("：关联的属性值")]),s._v(" "),a("li",[a("code",[s._v("policy")]),s._v("：设置关联对象的"),a("code",[s._v("copy")]),s._v("、"),a("code",[s._v("story")]),s._v("、"),a("code",[s._v("nonatomic")]),s._v("等参数:")])]),s._v(" "),a("p",[s._v("这些常量对应着引用关联值的政策，也就是 Objc 内存管理的引用计数机制。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("typedef OBJC_ENUM(uintptr_t, objc_AssociationPolicy) {\n    OBJC_ASSOCIATION_ASSIGN = 0,           \n    OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1,              \n    OBJC_ASSOCIATION_COPY_NONATOMIC = 3,                                                  \n    OBJC_ASSOCIATION_RETAIN = 01401,       \n    OBJC_ASSOCIATION_COPY = 01403                                               \n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("code",[s._v("objc_getAssociatedObject()")]),s._v(" 方法通过 "),a("code",[s._v("object")]),s._v(" 与 "),a("code",[s._v("Key")]),s._v(" 直接获取关联的属性值")]),s._v(" "),a("p",[a("code",[s._v("objc_removeAssociatedObjects()")]),s._v(" 移除关联")]),s._v(" "),a("p",[s._v("我们使用上面的获取类中属性和成员变量的方法，发现输出：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 有属性输出\npropertyName：name \npropertyAttributes:T@"NSString",&,N\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("没有成员变量 "),a("code",[s._v("_name")]),s._v("，进一步说明分类中不能添加成员变量！其本质是添加属性与分类之间关联。")]),s._v(" "),a("h2",{attrs:{id:"更换代码实现方法-method-swizzling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更换代码实现方法-method-swizzling"}},[s._v("#")]),s._v(" 更换代码实现方法（Method Swizzling）")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("在"),a("a",{attrs:{href:"http://www.jianshu.com/p/a36bfc976b8e",target:"_blank",rel:"noopener noreferrer"}},[s._v("上篇"),a("OutboundLink")],1),s._v("中详细介绍了"),a("code",[s._v("Method Swizzling")]),s._v("的原理，其本质是更换了 "),a("code",[s._v("selector")]),s._v(" 的 "),a("code",[s._v("IMP")]),s._v(" 。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#import "ViewController.h"\n#import <objc/runtime.h>\n#import "ClassA.h"\n#import "ClassB.h"\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n+ (void)load {\n    Method classA_method = class_getInstanceMethod([ClassA class], @selector(methodAOfClassAWithArg:));\n    Method classB_method = class_getInstanceMethod([ClassB class], @selector(methodAOfClassBWithArg:));\n    method_exchangeImplementations(classA_method, classB_method);\n}\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    [classA methodAOfClassAWithArg:@"classA 发出的 A方法"];\n    [classB methodAOfClassBWithArg:@"classB 发出的 A方法"];\n}    \n\n// 输出\n\n2016-11-22 13:07:15.151 UseRuntime[1015:533335]  methodAOfClassB arg = classA 发出的 A方法\n2016-11-22 13:07:15.151 UseRuntime[1015:533335]  methodAOfClassA arg = classB 发出的 A方法\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("p",[s._v("首先交换方法写在 "),a("code",[s._v("+(void)load")]),s._v(",在程序的一开始就调用执行，你将不会碰到并发问题。")]),s._v(" "),a("p",[s._v("我们可以发现两个方法的实现过程以及对换。")]),s._v(" "),a("p",[s._v("当然，平时使用我们并不会这么做，当我们要在系统提供的方法上再扩充功能时(不能重写系统方法)，就可以使用"),a("code",[s._v("Method Swizzling")]),s._v(".")]),s._v(" "),a("p",[s._v("我们给"),a("code",[s._v("NSArray")]),s._v("添加一个分类"),a("code",[s._v("AddLog")]),s._v(",给 "),a("code",[s._v("arrayByAddingObject:")]),s._v("方法添加一个输出方法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#import "NSArray+AddLog.h"\n#import <objc/runtime.h>\n\n@implementation NSArray (AddLog)\n\n+ (void)load {\n\n    SEL ori_selector = @selector(arrayByAddingObject:);\n    SEL my_selector = @selector(my_arrayByAddingObject:);\n    \n    Method ori_method = class_getInstanceMethod([NSArray class], ori_selector);\n    Method my_method  = class_getInstanceMethod([NSArray class], my_selector);\n    \n    if (([NSArray class], ori_selector, method_getImplementation(my_method), method_getTypeEncoding(my_method))) {\n        \n        class_replaceMethod([NSArray class], my_selector, method_getImplementation(ori_method), method_getTypeEncoding(ori_method));\n        \n    } else {\n        method_exchangeImplementations(ori_method, my_method);\n    }\n\n}\n\n- (NSArray *)my_arrayByAddingObject:(id)anObject {\n\n    NSArray *array = [self my_arrayByAddingObject:anObject];\n    NSLog(@"添加了一个元素 %@", anObject);\n    return array;\n}\n\n@end\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("p",[s._v("我们来看看这三个方法：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("class_addMethod()")]),s._v("：给一个方法添加新的方法和实现")]),s._v(" "),a("li",[a("code",[s._v("class_replaceMethod(）")]),s._v("：取代了对于一个给定的类的实现方法")]),s._v(" "),a("li",[a("code",[s._v("method_exchangeImplementations(）")]),s._v("：交换两个类的实现方法")])]),s._v(" "),a("p",[s._v("这里我们先使用 "),a("code",[s._v("class_addMethod()")]),s._v(" 在类中添加方法，若返回Yes说明类中没有该方法，然后再使用 "),a("code",[s._v("class_replaceMethod()")]),s._v(" 方法进行取代;若返回NO，说明类中有该方法，使用"),a("code",[s._v("method_exchangeImplementations()")]),s._v("直接交换两者的 "),a("code",[s._v("IMP")]),s._v(".")]),s._v(" "),a("p",[s._v("其实在这里直接使用"),a("code",[s._v("method_exchangeImplementations()")]),s._v("进行交换就可以了。因为类中必定有"),a("code",[s._v("arrayByAddingObject：")]),s._v("方法。")]),s._v(" "),a("p",[s._v("我给我们自己的方法命名为"),a("code",[s._v("my_arrayByAddingObject:")]),s._v(",在原来的方法名上加上前缀，既可以防止命名冲突，又方便阅读，在我们"),a("code",[s._v("my_arrayByAddingObject:")]),s._v("方法中调用本身")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("NSArray *array = [self my_arrayByAddingObject:anObject];\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("看似会陷入递归调用，其实则不会，因为我们已经在"),a("code",[s._v("+ (void)load")]),s._v("方法中更换了"),a("code",[s._v("IMP")]),s._v(",他会调用"),a("code",[s._v("arrayByAddingObject:")]),s._v("方法，然后在后面添加我们需要添加的功能。")]),s._v(" "),a("p",[a("code",[s._v("arrayByAddingObject:")]),s._v("方法的调用不变；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('NSArray *arr1 = @[@"one", @"two"];\nNSArray *arr2 = [arr1 arrayByAddingObject:@"three"];\nNSLog(@"arr2 = %@", arr2);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 输出\n2016-11-22 13:57:00.021 UseRuntime[1147:743449] 添加了一个元素 three\n2016-11-22 13:57:00.021 UseRuntime[1147:743449] arr2 = (\n    one,\n    two,\n    three\n)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"动态添加方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态添加方法"}},[s._v("#")]),s._v(" 动态添加方法")]),s._v(" "),a("p",[s._v("动态添加方法就是在消息转发前在"),a("code",[s._v("+ (BOOL)resolveInstanceMethod:(SEL)sel")]),s._v("方法中使用"),a("code",[s._v("class_addMethod()")]),s._v(" 添加方法。")]),s._v(" "),a("p",[s._v("下面我面添加一个名为"),a("code",[s._v("resolveThisMethodDynamically")]),s._v("的方法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('void dynamicMethodIMP(id self, SEL _cmd) {\n    // implementation ....\n    printf("执行了dynamicMethodIMP!!!!");\n}\n\n+ (BOOL)resolveInstanceMethod:(SEL)sel {\n    \n    if (sel == @selector(resolveThisMethodDynamically)) {\n        class_addMethod([self class], sel, (IMP) dynamicMethodIMP, "v@:");\n        return YES;\n    }\n    return [super resolveInstanceMethod:sel];\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("调用：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("performSelector:@selector(resolveThisMethodDynamically)];\n\n// 输出\n执行了dynamicMethodIMP!!!!\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("对于上面添加的的方法 "),a("code",[s._v("resolveThisMethodDynamically")]),s._v(" ，使用 "),a("code",[s._v("[self performSelector:@selector(resolveThisMethodDynamically)]")]),s._v(" 进行调用，不能使用"),a("code",[s._v("[self resolveThisMethodDynamically]")]),s._v(",因为压根就没有声明 "),a("code",[s._v("-(void)resolveThisMethodDynamically")]),s._v(",会报编译错误。")]),s._v(" "),a("p",[s._v("整个过程就是，"),a("code",[s._v("performSelector:")]),s._v("调用"),a("code",[s._v("resolveThisMethodDynamically")]),s._v("方法，然后在列表中找不到（因为类中根本就没有注册该方法），然后跳入 "),a("code",[s._v("+ (BOOL)resolveInstanceMethod:")]),s._v(" 中，我们再为"),a("code",[s._v("resolveThisMethodDynamically")]),s._v("方法添加具体实现。")]),s._v(" "),a("h2",{attrs:{id:"字典转属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字典转属性"}},[s._v("#")]),s._v(" 字典转属性")]),s._v(" "),a("p",[s._v("将字典转化为模型，是在我们iOS开发中最为常用的技能。iOS的模型框架如"),a("code",[s._v("JSONModel")]),s._v(","),a("code",[s._v("MJExtension")]),s._v(","),a("code",[s._v("MJExtension")]),s._v("等皆是利用了runtime，将字典转为模型，不过兼顾的细节更多。下面我们来实现一个简易的字典转模型框架。")]),s._v(" "),a("p",[s._v("先上代码：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#import "NSObject+BYModel.h"\n#import <objc/runtime.h>\n#import <objc/message.h>\n\n@implementation NSObject (BYModel)\n\n- (void)by_modelSetDictionary:(NSDictionary *)dic {\n\n    Class cls = [self class];\n    \n    // 遍历本类和父类的变量\n    while (cls) {\n        //获取所有成员变量\n        unsigned int outCount = 0;\n        Ivar *ivars = class_copyIvarList(cls, &outCount);\n        \n        for (int i = 0; i < outCount; i++) {\n            Ivar ivar = ivars[i];\n            \n            // 获取变量名\n            NSMutableString *ivar_Name = [NSMutableString stringWithUTF8String:ivar_getName(ivar)];\n        \n            [ivar_Name replaceCharactersInRange:NSMakeRange(0, 1) withString:@""];// _ivar -> ivar\n            \n            //\n            NSString *key = [ivar_Name copy];\n            if ([key isEqualToString:@"dece"]) {\n                key = @"description";\n            }\n            if ([key isEqualToString:@"ID"]) {\n                key = @"id";\n            }\n            \n            id value = dic[key];\n            if (!value) continue;\n            \n            // 拼接SEL    ivar -> setIvar:\n            \n            NSString *cap = [ivar_Name substringToIndex:1];\n            cap = cap.uppercaseString; // a->A\n            [ivar_Name replaceCharactersInRange:NSMakeRange(0, 1) withString:cap];\n            [ivar_Name insertString:@"set" atIndex:0];\n            [ivar_Name appendString:@":"];\n            \n            SEL selector = NSSelectorFromString(ivar_Name);\n            \n            // 判断类型并发送消息\n            NSString *type = [NSString stringWithUTF8String:ivar_getTypeEncoding(ivar)];\n            \n            if ([type hasPrefix:@"@"]) { // 对象类型\n                objc_msgSend(self, selector, value);\n            } else { // 非对象类型\n                if ([type isEqualToString:@"d"]) {\n                    objc_msgSend(self, selector, [value doubleValue]);\n                } else if ([type isEqualToString:@"f"]) {\n                    objc_msgSend(self, selector, [value floatValue]);\n                } else if ([type isEqualToString:@"i"]) {\n                    objc_msgSend(self, selector, [value intValue]);\n                } else {\n                    objc_msgSend(self, selector, [value longLongValue]);\n                }\n            }\n            \n            \n        }\n        // 获取父类进行遍历变量\n        cls = class_getSuperclass(cls);\n    }\n    \n}\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br")])]),a("p",[s._v("这个这个段代码可能出现编译错误：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://ww3.sinaimg.cn/large/7853084cgw1fa3b5fbvsqj20k001fjrn.jpg",alt:""}})]),s._v(" "),a("p",[s._v("解决办法很简单：")]),s._v(" "),a("p",[s._v("将项目 Project -> Build Settings -> Enable strct checking of objc_msgSend Calls 设置为 "),a("strong",[s._v("NO")]),s._v(" 即可")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://ww1.sinaimg.cn/large/7853084cgw1fa3b6mm9h7j20oh0aj0v8.jpg",alt:""}})]),s._v(" "),a("p",[s._v("接下来我们创建一个模型类"),a("code",[s._v("Student")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#import <Foundation/Foundation.h>\n\n@interface Student : NSObject\n\n@property (nonatomic, strong) NSString *name;\n@property (nonatomic, assign) int age;\n@property (nonatomic, assign) int idNumber;\n\n@end\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("使用我们的转模型方法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('NSDictionary *dic = @{ @"name":@"邱帅", @"age": @(23), @"idNumber":@(1234567)};\n\nStudent *stu = [Student new];\n[stu by_modelSetDictionary:dic];\n\nNSLog(@"%@", [NSString stringWithFormat:@"%@, %d, %d", stu.name, stu.age, stu.idNumber]);\n\n// 输出\n2016-11-24 15:32:46.351 Demo_字典转模型（Runtime）[2131:884627] 邱帅, 23, 1234567\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("该方法先利用我们上面介绍的"),a("code",[s._v("class_copyIvarList()")]),s._v("获取类中的成员变量列表，然后进行遍历，拼接字符串"),a("code",[s._v("setIvar:")]),s._v("，最后调用"),a("code",[s._v("objc_msgSend()")]),s._v("直接发送设置变量的消息，完成属性的赋值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("while (cls) {\n\n\t//code..\n\t\n cls = class_getSuperclass(cls);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("这个循环是则获取父类中的属性：当前类的属性遍历结束之后，指向父类，若父类存在则在继续遍历属性，否则就退出循环。")]),s._v(" "),a("p",[s._v("当然，这个方法只是介绍了利用runtime进行字典转模型的原理,实际中还有很多需要考虑的细节，项目中我还是推荐使用像"),a("a",{attrs:{href:"https://github.com/ibireme/YYModel",target:"_blank",rel:"noopener noreferrer"}},[s._v("YYModel"),a("OutboundLink")],1),s._v("这些比较成熟而且安全的模型框架。")]),s._v(" "),a("p",[s._v("关于快速字典转模型可以参考我写的一篇"),a("a",{attrs:{href:"http://www.jianshu.com/p/b7d8cf650722",target:"_blank",rel:"noopener noreferrer"}},[s._v("《快速完成JSON\\字典转模型 For YYModel》"),a("OutboundLink")],1),s._v("。")])])}),[],!1,null,null,null);n.default=t.exports}}]);